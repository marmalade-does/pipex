Directory structure:
└── pipex/
    ├── README.md
    ├── bash_flag_num.sh
    ├── infile
    ├── Makefile
    ├── outfile
    ├── pipex
    ├── pipex.c
    ├── pipex.h
    ├── pipex_get_path.c
    ├── pipex_here_utils.c
    ├── [inactive]/
    │   ├── outfile
    │   ├── pipex
    │   ├── pipex.c
    │   ├── pipex.h
    │   ├── pipex_get_path.c
    │   └── pipex_here_utils.c
    ├── from_github/
    │   ├── README.md
    │   ├── infile
    │   ├── Makefile
    │   ├── outfile
    │   ├── pipex
    │   └── includes/
    │       └── libft/
    │           ├── ft_atoi.c
    │           ├── ft_bzero.c
    │           ├── ft_calloc.c
    │           ├── ft_isalnum.c
    │           ├── ft_isalpha.c
    │           ├── ft_isascii.c
    │           ├── ft_isdigit.c
    │           ├── ft_isprint.c
    │           ├── ft_itoa.c
    │           ├── ft_lstadd_back_bonus.c
    │           ├── ft_lstadd_front_bonus.c
    │           ├── ft_lstclear_bonus.c
    │           ├── ft_lstdelone_bonus.c
    │           ├── ft_lstiter_bonus.c
    │           ├── ft_lstlast_bonus.c
    │           ├── ft_lstmap_bonus.c
    │           ├── ft_lstnew_bonus.c
    │           ├── ft_lstsize_bonus.c
    │           ├── ft_memchr.c
    │           ├── ft_memcmp.c
    │           ├── ft_memcpy.c
    │           ├── ft_memmove.c
    │           ├── ft_memset.c
    │           ├── ft_printf.c
    │           ├── ft_printf.h
    │           ├── ft_putchar_fd.c
    │           ├── ft_putendl_fd.c
    │           ├── ft_putnbr_fd.c
    │           ├── ft_putstr_fd.c
    │           ├── ft_split.c
    │           ├── ft_strchr.c
    │           ├── ft_strdup.c
    │           ├── ft_striteri.c
    │           ├── ft_strjoin.c
    │           ├── ft_strlcat.c
    │           ├── ft_strlcpy.c
    │           ├── ft_strlen.c
    │           ├── ft_strmapi.c
    │           ├── ft_strncmp.c
    │           ├── ft_strnstr.c
    │           ├── ft_strrchr.c
    │           ├── ft_strtrim.c
    │           ├── ft_substr.c
    │           ├── ft_tolower.c
    │           ├── ft_toupper.c
    │           ├── libft.h
    │           ├── main_test.c
    │           ├── Makefile
    │           ├── print_hexptry.c
    │           └── print_types.c
    └── includes/
        └── libft/
            ├── ft_atoi.c
            ├── ft_bzero.c
            ├── ft_calloc.c
            ├── ft_isalnum.c
            ├── ft_isalpha.c
            ├── ft_isascii.c
            ├── ft_isdigit.c
            ├── ft_isprint.c
            ├── ft_itoa.c
            ├── ft_lstadd_back_bonus.c
            ├── ft_lstadd_front_bonus.c
            ├── ft_lstclear_bonus.c
            ├── ft_lstdelone_bonus.c
            ├── ft_lstiter_bonus.c
            ├── ft_lstlast_bonus.c
            ├── ft_lstmap_bonus.c
            ├── ft_lstnew_bonus.c
            ├── ft_lstsize_bonus.c
            ├── ft_memchr.c
            ├── ft_memcmp.c
            ├── ft_memcpy.c
            ├── ft_memmove.c
            ├── ft_memset.c
            ├── ft_printf.c
            ├── ft_printf.h
            ├── ft_putchar_fd.c
            ├── ft_putendl_fd.c
            ├── ft_putnbr_fd.c
            ├── ft_putstr_fd.c
            ├── ft_split.c
            ├── ft_strchr.c
            ├── ft_strdup.c
            ├── ft_striteri.c
            ├── ft_strjoin.c
            ├── ft_strlcat.c
            ├── ft_strlcpy.c
            ├── ft_strlen.c
            ├── ft_strmapi.c
            ├── ft_strncmp.c
            ├── ft_strnstr.c
            ├── ft_strrchr.c
            ├── ft_strtrim.c
            ├── ft_substr.c
            ├── ft_tolower.c
            ├── ft_toupper.c
            ├── libft.h
            ├── main_test.c
            ├── Makefile
            ├── print_hexptry.c
            └── print_types.c

================================================
FILE: README.md
================================================
# pipex
pipex project for 42

next to do
* then get a pipex tester online and profit

Next
* need to do the tests again - do tests with both relative and absolute paths and command name.

Things to ask people as 42 before handing in: 
* the buffer size in the pipex_rd_nxt_lne()
-- I put as 9999, however IDK if that is good, i put as INT_MAX earlier, however chat said it would fail. 
* Makefile good ? (both the root/tpipex  Makefile and the includes/libft makefile) and how you did the touch Makeefile thing? 
Before hanading in 
* remove the comments in ur functions
* remove the -fsanatize flag in the makefile
* make sure that the whole thing recompiles if the Makefile file is touched


Later:
* think about integrating the gnl function in your libft --> (just so that you can move the librairy w/ everything in the future)





int	main(int argc, char *argv[], char **envp)
{
	int	infile;
	int	outfile;
	int	i;

	if (argc < 5)
		ft_fail("Usage, \
			need at least two commands: ./pipex file1 cmd1 cmd2 ... cmdn file2",
				6);
	if (!(ft_strncmp(argv[1], "here_doc", 8)))
	{
		if (argc < 6)
			ft_fail("Usage: ./pipex here_doc LIMITER cmd1 cmd2 ... cmdn file2",
				7);
		i = 3;
		outfile = open(argv[argc - 1], O_WRONLY | O_APPEND | O_CREAT, 0644);
		if (outfile <= 0)
			ft_fail("Error opening file - main", 8);
		ft_here_we_are(argv[2]);
	}
	else
	{
		i = 2;
		infile = open(argv[1], O_RDONLY);
		if (infile < 0)			ft_fail("Error opening input file\n", 9);
		outfile = open(argv[argc - 1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
		if (outfile < 0)
			ft_fail("Error opening output file\n", 10);
		if (dup2(infile, STDIN_FILENO) < 0)
			ft_fail("Error redirecting input - main\n", 11);
	}
	while (i < argc - 2)
	{
		children(argv[i], envp);
		i++;
	}
	if ((dup2(outfile, STDOUT_FILENO)) < 0)
		ft_fail("Error redirecting output", 11);
	wrapped_execve(argv[i], envp);
	ft_fail("Error executing command", 12); // use of dup2() here is correct
}






================================================
FILE: bash_flag_num.sh
================================================
#!/bin/bash

# This script outputs a number based on the provided flag.

if [[ -z "$1" ]]; then
  echo "Usage: $0 <flag>"
  echo "Flags: -a (outputs 10), -b (outputs 20), -c (outputs 30)"
  exit 1
fi

case "$1" in
  -a)
    echo 10
    ;;
  -b)
    echo 20
    ;;
  -c)
    echo 30
    ;;
  *)
    echo "Invalid flag: $1"
    echo "Accepted flags: -a, -b, -c"
    exit 1
    ;;
esac


================================================
FILE: infile
================================================
# Random Text Collection
The morning sun filtered through the venetian blinds, casting 
parallel shadows across the hardwood floor. Margaret had always 
preferred this time of day when the world seemed suspended between 
sleep and awakening. She reached for her coffee mug, noting how 
the ceramic had developed tiny hairline cracks over the years of 
faithful service. The kitchen hummed with the familiar sounds of 
suburban life: a neighbor's lawnmower starting uplol, children's voices 
carrying from the playground three blocks away, and the distant 
rumble of commuter trains.
< infile grep "ERROR" | wc -l
In the garden, tomatoes hung heavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weathered and strong, showing her 
how to pinch the basil stems just lolso, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
In the garden, tomatoes hung eavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weatherloled and strong, showing her 
how to pinch the basil stems just so, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -llollol
< infile grep "ERROR" | wc -l
infile grep "ERROR" | wc -l
In the garden, tomatoes hung heavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weathered and strong, showing her 
how to pinch the basil stems just so, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
The telephone rang three times before fallilollolng silent. These days, most
calls were automated voices selling extended warranties or vacation
packages to places she'd never heard of. Real conversations happened
through text messages and video calls, though she still preferred the 
weight of handwritten letters. There was something about ink on paper,
the deliberate choice of words when mistakes couldn't be easily deleted, 
that made communication feel more intentional.
Downtown, the old theater was being renovated again. This would be the
third time in fifteen years that someone had tried to restore it to its 
former glory. The marquee letters lay scattered in boxes backstage, waiting
for someone to decide what stories they would tell next. Local historians
argued about preserving the original Art Deco details while modernizing
the sound system and adding wheelchair accessibility. Progress and
preservation rarely agreed on the best path forward.
The library's rare books clolollection included a first edition of poems by
a local writer who had never achieved fame beyond the county borders.
Her verses about prairie storms and harvest moons sat alongside donated
romance novels and computer programming guides. Knowledge accumulated in
layers, like sediment in a riverbed, with each generation adding their
contributions to the collective understanding of how to be human in an
uncertain world.
STOP
Professor Williams adjusted his glasses and looked out at the lecture hall
filled with students who seemed to grow younger each semester. Today's
topic was the intersection of technology and privacy, a subject that evolved
faster than any textbook could capture. He remembered when the biggest concern
was whether employers might read personal emails. Now, artificial intelligence
systems could predict human behavior with unsettling accuracy, and teenagers
shared their daily lives with algorithms that knew them better than their own families.
The city's new bike-sharing program had exceeded all expectations. Bright
green bicycles appeared on every corner, unlocked with smartphone apps by
commuters who had grown tired of traffic jams and parking fees. Urban planners
watched the data streams, tracking popular routes and identifying areas where
new bike lanes might be needed. Change happened incrementally, one pedal stroke
at a time, as people rediscovered the simple pleasure of human-powered transportation.
In the museum's storage rooms, artifacts waited in climate-controlled darkness
for their turn to tell stories. Ancient pottery shards shared shelf space with
disco records and early computer equipment. Time collapsed these boundaries
between eras, reminding visitors that every age believed itself to be the most
important, the most advanced, the most enlightened. Future archaeologists would
puzzle over our plastic water bottles and smartphone chargers with the same careful
attention that current scholars devoted to Roman coins and Egyptian jewelry.
The night shift at the hospital moved with practiced efficiency through corridors 
that never truly slept. Nurses checked on patients whose dreams were interrupted
by beeping monitors and the soft shuffle of medical shoes on linoleum. In the
pediatric ward, a young mother read fairy tales to her daughter, her voice
steady despite the uncertainty that tomorrow's test results might bring. 
ope and fear walked hand in hand through these hallways, reminding everyone
that healing was as much about the spirit as the body.
The old man at the bus stop fed breadcrumbs to pigeons while waiting for
the 47 route that would take him to his weekly chess game at the community
center. His opponent was a woman thirty years younger who had learned the
game from her grandfather, creating an unbroken chain of strategy and
friendship that stretched across generations. They rarely spoke beyond
commenting on particularly clever moves, but their Thursday afternoon games
had become a constant in both their lives, proof that some human
connections transcended words and explanation.


================================================
FILE: Makefile
================================================
NAME = pipex

# Source files (root directory files only)
SRC = pipex.c \
      pipex_here_utils.c \
	  pipex_get_path.c \

# Object files (in obj directory)
OBJ_DIR = obj
OBJ = $(SRC:%.c=$(OBJ_DIR)/%.o)

# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror -fsanitize=address -fsanitize=leak -g

# Libft configuration
LIBFT_DIR = includes/libft
LIBFT = $(LIBFT_DIR)/libft.a

# Include directories
INCLUDES = -I. -I$(LIBFT_DIR)

# Default target
all: $(NAME)

# Build libft first
$(LIBFT):
	@make -C $(LIBFT_DIR)

# Build the main executable
$(NAME): $(LIBFT) $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) -L$(LIBFT_DIR) -lft -o $(NAME)

# Compile object files
$(OBJ_DIR)/%.o: %.c pipex.h Makefile
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Clean object files
clean:
	rm -f $(OBJ_DIR)/*.o
	@make clean -C $(LIBFT_DIR)

# Clean everything
fclean: clean
	rm -f $(NAME)
	@make fclean -C $(LIBFT_DIR)

# Rebuild everything
re: fclean all

# Phony targets
.PHONY: all clean fclean re


================================================
FILE: outfile
================================================



================================================
FILE: pipex
================================================
[Non-text file]


================================================
FILE: pipex.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/18 18:24:27 by lroberts          #+#    #+#             */
/*   Updated: 2025/07/16 06:54:23 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./pipex.h"

static void	handle_here_doc(int argsc, char **argv, int *i, int *outfile);
static void	handle_regular_mode(int argc, char **argv, int *i, int *outfile);

int	main(int argc, char *argv[], char **envp)
{
	int	outfile;
	int	i;

	if (argc < 5)
		ft_fail("Usage: ./pipex file1 cmd1 cmd2 ... cmdn file2", 6);
	if (!(ft_strncmp(argv[1], "here_doc", 8)))
		handle_here_doc(argc, argv, &i, &outfile);
	else
	{
		handle_regular_mode(argc, argv, &i, &outfile);
	}
	while (i < argc - 2)
	{
		children(argv[i], envp);
		i++;
	}
	if (dup2(outfile, STDOUT_FILENO) < 0)
		ft_fail("Error redirecting output", 11);
	wrapped_execve(argv[i], envp);
	ft_fail("Error executing command", 12);
}

static void	handle_here_doc(int argc, char **argv, int *i, int *outfile)
{
	if (argc < 6)
		ft_fail("Usage: ./pipex here_doc LIMITER cmd1 cmd2 ... cmdn file2", 7);
	*i = 3;
	*outfile = open(argv[argc - 1], O_WRONLY | O_APPEND | O_CREAT, 0644);
	if (*outfile <= 0)
		ft_fail("Error opening file - main", 8);
	ft_here_we_are(argv[2]);
}

static void	handle_regular_mode(int argc, char **argv, int *i, int *outfile)
{
	int	infile;

	*i = 2;
	infile = open(argv[1], O_RDONLY);
	if (infile < 0)
		ft_fail("Error opening input file\n", 9);
	*outfile = open(argv[argc - 1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
	if (*outfile < 0)
		ft_fail("Error opening output file\n", 10);
	if (dup2(infile, STDIN_FILENO) < 0)
		ft_fail("Error redirecting input - main\n", 11);
}

void	children(char *arg, char **envp)
{
	int		pip[2];
	pid_t	pid;

	if (pipe(pip) == -1)
		ft_fail("Error creating pipe", 13);
	pid = fork();
	if (pid == -1)
		ft_fail("Error creating fork", 14);
	if (pid == 0)
	{
		close(pip[0]);
		dup2(pip[1], STDOUT_FILENO);
		wrapped_execve(arg, envp);
		ft_fail("execve failed -- CHILDREN", 17);
	}
	else
	{
		close(pip[1]);
		dup2(pip[0], STDIN_FILENO);
		wait(NULL);
	}
}


void	wrapped_execve(char *arg, char **envp)
{
	char	**splited;
	char	*path;
	char 	*cmd_name;

	splited = ft_split(arg, ' ');
	if (splited == NULL)
		ft_fail("ft_split failed - wrapped execve", 16);
	cmd_name = ft_strrchr(splited[0], '/'); // needs to be strrchr so that we get the *last* '/'
	if (cmd_name++)
	{
		if (access(splited[0], X_OK) == 0)
		{
			path = splited[0];
			splited[0] = cmd_name;
		}
		else
			ft_handle_error(splited, NULL, "input path not accesible - wrapped_execve", 55);
	}
	else
	{
		path = get_path(splited, envp);
		if (path == NULL)
			ft_handle_error(splited, NULL, "get_path failed - wrapped execve", 17);
	}
	execve(path, splited, envp);
	free_dbl_ptrs(splited, NULL);
	if (path != splited[0])
		free(path);
	ft_fail("execve failed for some reason", errno);
}


/*
static void	ft_printing_splited(char **splited)
{
	size_t i= 0;
	write(2, "\n", 1);
	while(splited[i] != NULL)
	{
		write(2, splited[i], ft_strlen(splited[i]));
		write(2, "\n", 1);
		i++;
	}
	write(2, "got to the end\n", 15);
}
*/


================================================
FILE: pipex.h
================================================

#ifndef PIPEX_H
# define PIPEX_H

# include <stdlib.h>
# include <unistd.h>
# include <string.h>
# include <stdio.h>
# include <fcntl.h>
# include <errno.h>
# include <stdarg.h>
# include <sys/wait.h>
# include "./includes/libft/libft.h" 

// pipex.c
void children(char *arg, char **envp);
void wrapped_execve(char *arg, char **envp);


// pipex_here_utils.c
void	free_dbl_ptrs(char **first, ...);
void	ft_fail(char *errmsg, int fail_num);
void	ft_here_we_are(char *delimeter);
int     pipex_rd_nxt_line(char **line);

// pipex_get_path.c
char	*get_path(char **splitted_cmd, char **envp);
char	*ft_test_paths(char **splitted_cmd, char **paths);
char	**append_backslash(char **paths);
void	ft_handle_error(char **splitted_cmd, char **paths, char *msg, int code);

#endif



================================================
FILE: pipex_get_path.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_get_path.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 16:09:56 by lrobft_handleerts          #+#    #+#             */
/*   Updated: 2025/07/16 06:48:50 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./pipex.h"

void	ft_handle_error(char **splitted_cmd, char **paths, char *msg, int code)
{
	free_dbl_ptrs(splitted_cmd, paths, NULL);
	ft_fail(msg, code);
}

char	*get_path(char **splitted_cmd, char **envp)
{
	size_t	i;
	char	**paths;

	i = 0;
	paths = NULL;
	while (envp[i])
	{
		if (ft_strncmp(envp[i], "PATH=", 5) == 0)
		{
			paths = ft_split(envp[i] + 5, ':');
			if (paths == NULL)
				ft_handle_error(splitted_cmd, NULL, "ft_split fail-get_path", 1);
			break ;
		}
		i++;
	}
	if (paths == NULL)
	{
		ft_handle_error(splitted_cmd, NULL, "PATH not in env - get_path", 2);
	}
	return (ft_test_paths(splitted_cmd, paths));
}

char	*ft_test_paths(char **splitted_cmd, char **paths)
{
	char	**back_slashed_paths;
	char	*accessible;
	size_t	i;

	back_slashed_paths = append_backslash(paths);
	free_dbl_ptrs(paths, NULL);
	if (!back_slashed_paths)
		ft_handle_error(splitted_cmd, NULL, "app*_back\\ fail-ft_test_paths", 3);
	i = 0;
	while (back_slashed_paths[i])
	{
		accessible = ft_strjoin(back_slashed_paths[i], splitted_cmd[0]);
		if (!accessible)
			ft_handle_error(splitted_cmd, back_slashed_paths, "malloc fail", 4);
		if (access(accessible, X_OK) == 0)
		{
			free_dbl_ptrs(back_slashed_paths, NULL);
			return (accessible);
		}
		free(accessible);
		i++;
	}
	ft_handle_error(splitted_cmd, back_slashed_paths,
		"no binaries available with that name - ft_test_paths", 5);
	return (NULL);
}

char	**append_backslash(char **paths)
{
	size_t	i;
	char	**back_slashed_paths;

	if (paths == NULL)
		return (NULL);
	i = 0;
	while (paths[i])
		i++;
	back_slashed_paths = (char **)malloc(sizeof(char *) * (i + 1));
	if (back_slashed_paths == NULL)
		return (NULL);
	i = 0;
	while (paths[i])
	{
		back_slashed_paths[i] = ft_strjoin(paths[i], "/");
		if (!back_slashed_paths[i])
		{
			free_dbl_ptrs(back_slashed_paths, NULL);
			return (NULL);
		}
		i++;
	}
	back_slashed_paths[i] = NULL;
	return (back_slashed_paths);
}



================================================
FILE: pipex_here_utils.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_here_utils.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 15:19:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/07/15 16:17:46 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

void	free_dbl_ptrs(char **first, ...)
{
	va_list	args;
	char	**ptr;
	size_t	i;

	if (first)
	{
		i = 0;
		while (first[i])
			free(first[i++]);
		free(first);
	}
	va_start(args, first);
	ptr = va_arg(args, char **);
	while (ptr != NULL)
	{
		i = 0;
		while (ptr[i])
			free(ptr[i++]);
		free(ptr);
		ptr = va_arg(args, char **);
	}
	va_end(args);
}

void	ft_fail(char *errmsg, int fail_num)
{
	perror(errmsg);
	exit(fail_num);
}

static void	ft_child_here_we_are(char *delimeter, int *pip)
{
	char	*line;

	close(pip[0]); // Child doesn't read from pipe
	while (pipex_rd_nxt_line(&line))
	{
		if (ft_strncmp(line, delimeter, ft_strlen(delimeter)) == 0)
		{
			if (line[ft_strlen(delimeter)] == '\0')
			{
				free(line);
				break ;
			}
		}
		if (write(pip[1], line, ft_strlen(line)) == -1 || write(pip[1], "\n",
				1) == -1)
		{
			free(line);
			close(pip[1]);
			exit(1);
		}
		free(line);
	}
	close(pip[1]);
	exit(0);
}

void	ft_here_we_are(char *delimeter)
{
	int		pip[2];
	pid_t	pid;

	if (pipe(pip) < 0)
		ft_fail("Error creating pipe - ft_here_doc", 19);
	pid = fork();
	if (pid < 0)
		ft_fail("Error creating fork - ft_here_doc", 20);
	if (pid == 0)
	{
		close(pip[0]);
		ft_child_here_we_are(delimeter, pip);
	}
	// no else statment needed for the parent function since the child exits
	close(pip[1]);
	wait(NULL);
	dup2(pip[0], STDIN_FILENO);
	close(pip[0]); // why have the close of the pipes? I don't get it
}

int	pipex_rd_nxt_line(char **line)
{
	int		red;
	size_t	i;
	char	*buf;
	char	c;

	buf = (char *)malloc(1024);
	if (buf == NULL) // og returns -1->allows parent process to continue
		ft_fail("malloc failed - pipex_rd_nxt_line", 21);
	red = 1;
	c = 0;
	i = 0; // bruh tantas lineas :(
	while (red > 0 && c != '\n')
	{
		red = read(0, &c, 1);
		if (red > 0 && c != '\n')
		{
			buf[i] = c;
			i++;
		}
	}
	if (red == -1)
		return (free(buf), ft_fail("read failed - pipex_rd_nxt_line", 22), -1);
	buf[i] = '\0'; // Simple null termination
	*line = buf;
	return (red);
}



================================================
FILE: [inactive]/outfile
================================================



================================================
FILE: [inactive]/pipex
================================================
[Non-text file]


================================================
FILE: [inactive]/pipex.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/18 18:24:27 by lroberts          #+#    #+#             */
/*   Updated: 2025/07/15 18:56:22 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./pipex.h"

static void	handle_here_doc(int argc, char **argv, int *i, int *outfile);
static void	handle_regular_mode(int argc, char **argv, int *i, int *outfile);

int	main(int argc, char *argv[], char **envp)
{
	int	outfile;
	int	i;

	if (argc < 5)
		ft_fail("Usage: ./pipex file1 cmd1 cmd2 ... cmdn file2", 6);
	if (!(ft_strncmp(argv[1], "here_doc", 8)))
		handle_here_doc(argc, argv, &i, &outfile);
	else
	{
		handle_regular_mode(argc, argv, &i, &outfile);
	}
	while (i < argc - 2)
	{
		children(argv[i], envp);
		i++;
	}
	if (dup2(outfile, STDOUT_FILENO) < 0)
		ft_fail("Error redirecting output", 11);
	wrapped_execve(argv[i], envp);
	ft_fail("Error executing command", 12);
}

static void	handle_here_doc(int argc, char **argv, int *i, int *outfile)
{
	if (argc < 6)
		ft_fail("Usage: ./pipex here_doc LIMITER cmd1 cmd2 ... cmdn file2", 7);
	*i = 3;
	*outfile = open(argv[argc - 1], O_WRONLY | O_APPEND | O_CREAT, 0644);
	if (*outfile <= 0)
		ft_fail("Error opening file - main", 8);
	ft_here_we_are(argv[2]);
}

static void	handle_regular_mode(int argc, char **argv, int *i, int *outfile)
{
	int	infile;

	*i = 2;
	infile = open(argv[1], O_RDONLY);
	if (infile < 0)
		ft_fail("Error opening input file\n", 9);
	*outfile = open(argv[argc - 1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
	if (*outfile < 0)
		ft_fail("Error opening output file\n", 10);
	if (dup2(infile, STDIN_FILENO) < 0)
		ft_fail("Error redirecting input - main\n", 11);
}

void	children(char *arg, char **envp)
{
	int		pip[2];
	pid_t	pid;

	if (pipe(pip) == -1)
		ft_fail("Error creating pipe", 13);
	pid = fork();
	if (pid == -1)
		ft_fail("Error creating fork", 14);
	if (pid == 0)
	{
		close(pip[0]);
		dup2(pip[1], STDOUT_FILENO);
		wrapped_execve(arg, envp);
		ft_fail("execve failed -- CHILDREN", 17);
	}
	else
	{
		close(pip[1]);
		dup2(pip[0], STDIN_FILENO);
		wait(NULL);
	}
}

void	wrapped_execve(char *arg, char **envp)
{
	char	**splited;
	char	*path;
	size_t i;

	splited = ft_split(arg, ' ');
	if (splited == NULL)
		ft_fail("ft_split failed - wrapped execve", 16);
	i = -1;
	while(splited[0][++i] != '.' && i < 2)
	if(splited[0][i] == '/')
		execve(splited[0], splited, envp);
	else
		path = get_path(splited, envp);
	if (path == NULL)
	{
		free_dbl_ptrs(splited, NULL, NULL);
		ft_fail("get_path failed - wrapped execve", 17);
	}
	execve(path, splited, envp);
	free_dbl_ptrs(splited, NULL);
	free(path);
	ft_fail("execve failed for some reason", errno);
}

/*
static void	ft_printing_splited(char **splited)
{
	size_t i= 0;
	write(2, "\n", 1);
	while(splited[i] != NULL)
	{
		write(2, splited[i], ft_strlen(splited[i]));
		write(2, "\n", 1);
		i++;
	}
	write(2, "got to the end\n", 15);
}
*/


================================================
FILE: [inactive]/pipex.h
================================================

#ifndef PIPEX_H
# define PIPEX_H

# include <stdlib.h>
# include <unistd.h>
# include <string.h>
# include <stdio.h>
# include <fcntl.h>
# include <errno.h>
# include <stdarg.h>
# include <sys/wait.h>
# include "./includes/libft/libft.h" 

// pipex.c
void children(char *arg, char **envp);
void wrapped_execve(char *arg, char **envp);


// pipex_here_utils.c
void	free_dbl_ptrs(char **first, ...);
void	ft_fail(char *errmsg, int fail_num);
void	ft_here_we_are(char *delimeter);
int     pipex_rd_nxt_line(char **line);

// pipex_get_path.c
char	*get_path(char **splitted_cmd, char **envp);
char	*ft_test_paths(char **splitted_cmd, char **paths);
char	**append_backslash(char **paths);
void	ft_handle_error(char **splitted_cmd, char **paths, char *msg, int code);

#endif



================================================
FILE: [inactive]/pipex_get_path.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_get_path.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 16:09:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/07/16 06:48:14 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pipex.h"

void	ft_handle_error(char **splitted_cmd, char **paths, char *msg, int code)
{
	free_dbl_ptrs(splitted_cmd, paths, NULL);
	ft_fail(msg, code);
}

char	*get_path(char **splitted_cmd, char **envp)
{
	size_t	i;
	char	**paths;

	
	i = 0;
	paths = NULL;
	while (envp[i])
	{
		if (ft_strncmp(envp[i], "PATH=", 5) == 0)
		{
			exit(errno);
			paths = ft_split(envp[i] + 5, ':');
			if (paths == NULL)
				ft_handle_error(splitted_cmd, NULL, "ft_split fail-get_path", 1);
			break ;
		}
		i++;
	}
	if (paths == NULL)
	{
		ft_handle_error(splitted_cmd, NULL, "PATH not in env - get_path", 2);
	}
	return (ft_test_paths(splitted_cmd, paths));
}

char	*ft_test_paths(char **splitted_cmd, char **paths)
{
	char	**back_slashed_paths;
	char	*accessible;
	size_t	i;

	back_slashed_paths = append_backslash(paths);
	free_dbl_ptrs(paths, NULL);
	if (!back_slashed_paths)
		ft_handle_error(splitted_cmd, NULL, "app*_back\\ fail-ft_test_paths", 3);
	i = 0;
	while (back_slashed_paths[i])
	{
		accessible = ft_strjoin(back_slashed_paths[i], splitted_cmd[0]);
		if (!accessible)
			ft_handle_error(splitted_cmd, back_slashed_paths, "malloc fail", 4);
		if (access(accessible, X_OK) == 0)
		{
			free_dbl_ptrs(back_slashed_paths, NULL);
			return (accessible);
		}
		free(accessible);
		i++;
	}
	ft_handle_error(splitted_cmd, back_slashed_paths,
		"no binaries available with that name - ft_test_paths", 5);
	return (NULL);
}

char	**append_backslash(char **paths)
{
	size_t	i;
	char	**back_slashed_paths;

	if (paths == NULL)
		return (NULL);
	i = 0;
	while (paths[i])
		i++;
	back_slashed_paths = (char **)malloc(sizeof(char *) * (i + 1));
	if (back_slashed_paths == NULL)
		return (NULL);
	i = 0;
	while (paths[i])
	{
		back_slashed_paths[i] = ft_strjoin(paths[i], "/");
		if (!back_slashed_paths[i])
		{
			free_dbl_ptrs(back_slashed_paths, NULL);
			return (NULL);
		}
		i++;
	}
	back_slashed_paths[i] = NULL;
	return (back_slashed_paths);
}



================================================
FILE: [inactive]/pipex_here_utils.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipex_here_utils.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 15:19:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/07/16 06:48:56 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./pipex.h"

void	free_dbl_ptrs(char **first, ...)
{
	va_list	args;
	char	**ptr;
	size_t	i;

	if (first)
	{
		i = 0;
		while (first[i])
			free(first[i++]);
		free(first);
	}
	va_start(args, first);
	ptr = va_arg(args, char **);
	while (ptr != NULL)
	{
		i = 0;
		while (ptr[i])
			free(ptr[i++]);
		free(ptr);
		ptr = va_arg(args, char **);
	}
	va_end(args);
}

void	ft_fail(char *errmsg, int fail_num)
{
	perror(errmsg);
	exit(fail_num);
}

static void	ft_child_here_we_are(char *delimeter, int *pip)
{
	char	*line;

	close(pip[0]); // Child doesn't read from pipe
	while (pipex_rd_nxt_line(&line))
	{
		if (ft_strncmp(line, delimeter, ft_strlen(delimeter)) == 0)
		{
			if (line[ft_strlen(delimeter)] == '\0')
			{
				free(line);
				break ;
			}
		}
		if (write(pip[1], line, ft_strlen(line)) == -1 || write(pip[1], "\n",
				1) == -1)
		{
			free(line);
			close(pip[1]);
			exit(1);
		}
		free(line);
	}
	close(pip[1]);
	exit(0);
}

void	ft_here_we_are(char *delimeter)
{
	int		pip[2];
	pid_t	pid;

	if (pipe(pip) < 0)
		ft_fail("Error creating pipe - ft_here_doc", 19);
	pid = fork();
	if (pid < 0)
		ft_fail("Error creating fork - ft_here_doc", 20);
	if (pid == 0)
	{
		close(pip[0]);
		ft_child_here_we_are(delimeter, pip);
	}
	// no else statment needed for the parent function since the child exits
	close(pip[1]);
	wait(NULL);
	dup2(pip[0], STDIN_FILENO);
	close(pip[0]); // why have the close of the pipes? I don't get it
}

int	pipex_rd_nxt_line(char **line)
{
	int		red;
	size_t	i;
	char	*buf;
	char	c;

	buf = (char *)malloc(1024);
	if (buf == NULL) // og returns -1->allows parent process to continue
		ft_fail("malloc failed - pipex_rd_nxt_line", 21);
	red = 1;
	c = 0;
	i = 0; // bruh tantas lineas :(
	while (red > 0 && c != '\n')
	{
		red = read(0, &c, 1);
		if (red > 0 && c != '\n')
		{
			buf[i] = c;
			i++;
		}
	}
	if (red == -1)
		return (free(buf), ft_fail("read failed - pipex_rd_nxt_line", 22), -1);
	buf[i] = '\0'; // Simple null termination
	*line = buf;
	return (red);
}



================================================
FILE: from_github/README.md
================================================
# pipex
pipex project for 42

next to do
* then get a pipex tester online and profit

Next

Things to ask people as 42 before handing in: 
* the buffer size in the pipex_rd_nxt_lne()
-- I put as 9999, however IDK if that is good, i put as INT_MAX earlier, however chat said it would fail. 
* Makefile good ? (both the root/tpipex  Makefile and the includes/libft makefile) and how you did the touch Makeefile thing? 
Before hanading in 
* remove the comments in ur functions
* remove the -fsanatize flag in the makefile
* make sure that the whole thing recompiles if the Makefile file is touched


Later:
* think about integrating the gnl function in your libft --> (just so that you can move the librairy w/ everything in the future)





int	main(int argc, char *argv[], char **envp)
{
	int	infile;
	int	outfile;
	int	i;

	if (argc < 5)
		ft_fail("Usage, \
			need at least two commands: ./pipex file1 cmd1 cmd2 ... cmdn file2",
				6);
	if (!(ft_strncmp(argv[1], "here_doc", 8)))
	{
		if (argc < 6)
			ft_fail("Usage: ./pipex here_doc LIMITER cmd1 cmd2 ... cmdn file2",
				7);
		i = 3;
		outfile = open(argv[argc - 1], O_WRONLY | O_APPEND | O_CREAT, 0644);
		if (outfile <= 0)
			ft_fail("Error opening file - main", 8);
		ft_here_we_are(argv[2]);
	}
	else
	{
		i = 2;
		infile = open(argv[1], O_RDONLY);
		if (infile < 0)			ft_fail("Error opening input file\n", 9);
		outfile = open(argv[argc - 1], O_WRONLY | O_TRUNC | O_CREAT, 0644);
		if (outfile < 0)
			ft_fail("Error opening output file\n", 10);
		if (dup2(infile, STDIN_FILENO) < 0)
			ft_fail("Error redirecting input - main\n", 11);
	}
	while (i < argc - 2)
	{
		children(argv[i], envp);
		i++;
	}
	if ((dup2(outfile, STDOUT_FILENO)) < 0)
		ft_fail("Error redirecting output", 11);
	wrapped_execve(argv[i], envp);
	ft_fail("Error executing command", 12); // use of dup2() here is correct
}






================================================
FILE: from_github/infile
================================================
# Random Text Collection
The morning sun filtered through the venetian blinds, casting 
parallel shadows across the hardwood floor. Margaret had always 
preferred this time of day when the world seemed suspended between 
sleep and awakening. She reached for her coffee mug, noting how 
the ceramic had developed tiny hairline cracks over the years of 
faithful service. The kitchen hummed with the familiar sounds of 
suburban life: a neighbor's lawnmower starting uplol, children's voices 
carrying from the playground three blocks away, and the distant 
rumble of commuter trains.
< infile grep "ERROR" | wc -l
In the garden, tomatoes hung heavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weathered and strong, showing her 
how to pinch the basil stems just lolso, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
In the garden, tomatoes hung eavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weatherloled and strong, showing her 
how to pinch the basil stems just so, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -l
< infile grep "ERROR" | wc -llollol
< infile grep "ERROR" | wc -l
infile grep "ERROR" | wc -l
In the garden, tomatoes hung heavy on their vines, their red skin 
taut with summer ripeness. The basil plants had grown wild and fragrant,
attracting bees that moved lazily from flower to flower. Margaret 
remembered her grandmother's hands, weathered and strong, showing her 
how to pinch the basil stems just so, how to encourage growth while harvesting
the leaves for their evening pasta. Those hands had known seasons and soil, had
understood the language of growing things in ways that seemed almost
mystical to a young girl raised on concrete and convenience stores.
The telephone rang three times before fallilollolng silent. These days, most
calls were automated voices selling extended warranties or vacation
packages to places she'd never heard of. Real conversations happened
through text messages and video calls, though she still preferred the 
weight of handwritten letters. There was something about ink on paper,
the deliberate choice of words when mistakes couldn't be easily deleted, 
that made communication feel more intentional.
Downtown, the old theater was being renovated again. This would be the
third time in fifteen years that someone had tried to restore it to its 
former glory. The marquee letters lay scattered in boxes backstage, waiting
for someone to decide what stories they would tell next. Local historians
argued about preserving the original Art Deco details while modernizing
the sound system and adding wheelchair accessibility. Progress and
preservation rarely agreed on the best path forward.
The library's rare books clolollection included a first edition of poems by
a local writer who had never achieved fame beyond the county borders.
Her verses about prairie storms and harvest moons sat alongside donated
romance novels and computer programming guides. Knowledge accumulated in
layers, like sediment in a riverbed, with each generation adding their
contributions to the collective understanding of how to be human in an
uncertain world.
STOP
Professor Williams adjusted his glasses and looked out at the lecture hall
filled with students who seemed to grow younger each semester. Today's
topic was the intersection of technology and privacy, a subject that evolved
faster than any textbook could capture. He remembered when the biggest concern
was whether employers might read personal emails. Now, artificial intelligence
systems could predict human behavior with unsettling accuracy, and teenagers
shared their daily lives with algorithms that knew them better than their own families.
The city's new bike-sharing program had exceeded all expectations. Bright
green bicycles appeared on every corner, unlocked with smartphone apps by
commuters who had grown tired of traffic jams and parking fees. Urban planners
watched the data streams, tracking popular routes and identifying areas where
new bike lanes might be needed. Change happened incrementally, one pedal stroke
at a time, as people rediscovered the simple pleasure of human-powered transportation.
In the museum's storage rooms, artifacts waited in climate-controlled darkness
for their turn to tell stories. Ancient pottery shards shared shelf space with
disco records and early computer equipment. Time collapsed these boundaries
between eras, reminding visitors that every age believed itself to be the most
important, the most advanced, the most enlightened. Future archaeologists would
puzzle over our plastic water bottles and smartphone chargers with the same careful
attention that current scholars devoted to Roman coins and Egyptian jewelry.
The night shift at the hospital moved with practiced efficiency through corridors 
that never truly slept. Nurses checked on patients whose dreams were interrupted
by beeping monitors and the soft shuffle of medical shoes on linoleum. In the
pediatric ward, a young mother read fairy tales to her daughter, her voice
steady despite the uncertainty that tomorrow's test results might bring. 
ope and fear walked hand in hand through these hallways, reminding everyone
that healing was as much about the spirit as the body.
The old man at the bus stop fed breadcrumbs to pigeons while waiting for
the 47 route that would take him to his weekly chess game at the community
center. His opponent was a woman thirty years younger who had learned the
game from her grandfather, creating an unbroken chain of strategy and
friendship that stretched across generations. They rarely spoke beyond
commenting on particularly clever moves, but their Thursday afternoon games
had become a constant in both their lives, proof that some human
connections transcended words and explanation.


================================================
FILE: from_github/Makefile
================================================
NAME = pipex

# Source files (root directory files only)
SRC = pipex.c \
      pipex_here_utils.c \
	  pipex_get_path.c \

# Object files (in obj directory)
OBJ_DIR = obj
OBJ = $(SRC:%.c=$(OBJ_DIR)/%.o)

# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror -fsanitize=address -fsanitize=leak -g

# Libft configuration
LIBFT_DIR = includes/libft
LIBFT = $(LIBFT_DIR)/libft.a

# Include directories
INCLUDES = -I. -I$(LIBFT_DIR)

# Default target
all: $(NAME)

# Build libft first
$(LIBFT):
	@make -C $(LIBFT_DIR)

# Build the main executable
$(NAME): $(LIBFT) $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) -L$(LIBFT_DIR) -lft -o $(NAME)

# Compile object files
$(OBJ_DIR)/%.o: %.c pipex.h Makefile
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Clean object files
clean:
	rm -f $(OBJ_DIR)/*.o
	@make clean -C $(LIBFT_DIR)

# Clean everything
fclean: clean
	rm -f $(NAME)
	@make fclean -C $(LIBFT_DIR)

# Rebuild everything
re: fclean all

# Phony targets
.PHONY: all clean fclean re


================================================
FILE: from_github/outfile
================================================
22



================================================
FILE: from_github/pipex
================================================
[Non-text file]


================================================
FILE: from_github/includes/libft/ft_atoi.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:49:54 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:49:57 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_atoi(const char *str)
{
	int	i;
	int	neg;
	int	res;

	i = 0;
	neg = 1;
	res = 0;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			neg *= -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		res = (str[i] - '0') + (res * 10);
		i++;
	}
	return (res * neg);
}



================================================
FILE: from_github/includes/libft/ft_bzero.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:14 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	ft_memset(s, 0, n);
}



================================================
FILE: from_github/includes/libft/ft_calloc.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:26 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// chat says this doesn't handle the case were (count * size) > INT_MAX

void	*ft_calloc(size_t count, size_t size)
{
	size_t	b;
	void	*p;

	if (count == 0 || size == 0)
	{
		count = 1;
		size = 1;
	}
	b = count * size;
	p = malloc(b);
	if (p == NULL)
		return (NULL);
	else
		ft_bzero(p, b);
	return (p);
}



================================================
FILE: from_github/includes/libft/ft_isalnum.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:39 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:41 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int i)
{
	if ((i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') || (i >= '0'
			&& i <= '9'))
		return (1);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_isalpha.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:52 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:54 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalpha(int i)
{
	if (('a' <= i && i <= 'z') || ('A' <= i && i <= 'Z'))
		return (1);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_isascii.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:12 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isascii(int i)
{
	if (i >= 0 && i <= 127)
		return (1);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_isdigit.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:22 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:24 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isdigit(int i)
{
	while ('0' <= i && i <= '9')
		return (1);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_isprint.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:32 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:33 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isprint(int i)
{
	if (i >= 32 && i <= 126)
		return (1);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_itoa.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:46 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:47 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static unsigned int	ft_number_size(int number);

char	*ft_itoa(int n)
{
	char			*string;
	unsigned int	number;
	unsigned int	length;

	length = ft_number_size(n);
	string = (char *)malloc(sizeof(char) * (length + 1));
	if (string == NULL)
		return (NULL);
	if (n < 0)
	{
		string[0] = '-';
		number = -n;
	}
	else
		number = n;
	if (number == 0)
		string[0] = '0';
	string[length] = '\0';
	while (number != 0)
	{
		string[length - 1] = (number % 10) + '0';
		number = number / 10;
		length--;
	}
	return (string);
}

static unsigned int	ft_number_size(int number)
{
	unsigned int	length;

	length = 0;
	if (number == 0)
		return (1);
	if (number < 0)
		length += 1;
	while (number != 0)
	{
		number /= 10;
		length++;
	}
	return (length);
}



================================================
FILE: from_github/includes/libft/ft_lstadd_back_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:04 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:05 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstadd_back(t_list **alst, t_list *new)
{
	t_list	*last;

	if (new == NULL)
		return ;
	if (*alst == NULL)
	{
		*alst = new;
	}
	else
	{
		last = ft_lstlast(*alst);
		last->next = new;
	}
	new->next = NULL;
}



================================================
FILE: from_github/includes/libft/ft_lstadd_front_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:20 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:22 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// need to check documentation
// --- if(!(*lst))
// --- --- then should I make new the fist (new) elemnt
// in the list (like in add_back)
// Do the safety check in the front?

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (new == NULL)
		return ;
	new->next = *lst;
	*lst = new;
}



================================================
FILE: from_github/includes/libft/ft_lstclear_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:32 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:33 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*next_1;

	if (!lst || !del)
		return ;
	while (*lst != NULL)
	{
		next_1 = (*lst)->next;
		del((*lst)->content);
		free(*lst);
		*lst = next_1;
	}
	*lst = NULL;
}

/* og implementation
void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*current_0;
	t_list	*next_1;

	if(!lst || !del)
		return ;
	current_0 = *lst;
	while(current_0 != NULL)
	{
		next_1 = current_0 -> next;
		del(current_0 -> content);
		free(current_0);
		current_0 = next_1;
	}
	*lst = NULL;
}
*/



================================================
FILE: from_github/includes/libft/ft_lstdelone_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:46 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:02:53 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	del(lst->content);
	free(lst);
}
// MAKE SURE YOU DOUBLE CHECK THIS FUNCTION 
// ---- WHEN YOU GET INTO 42, SOME OF THIS SHIT IS LIKE HELLA STUPID

// del(*void) is used to free 
// ---- the memory allocated to *content (the studd at the end of the ptr)
// free(lst) then frees the s_list structure (including deleting the *next)
// if done in the middle of a 
// ---- list (say x) this would create a (x-1) dangling pointer and a ()



================================================
FILE: from_github/includes/libft/ft_lstiter_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:04:07 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (!lst || !f)
		return ;
	while (lst != NULL)
	{
		f(lst->content);
		lst = lst->next;
	}
}

// here the use of a next ptr isn't needed
// because you can just assign next ptr value after applying f()

// need to chek in your code if you used the defensive
// t_list *tmp just here, or in other parts too



================================================
FILE: from_github/includes/libft/ft_lstlast_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:11 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (!lst)
		return (NULL);
	while ((lst->next) != NULL)
	{
		lst = lst->next;
	}
	return (lst);
}



================================================
FILE: from_github/includes/libft/ft_lstmap_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:22 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:23 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <string.h>

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*new_list;
	t_list	*new_obj;
	t_list	*current;

	if (!lst || !f || !del)
		return (NULL);
	new_list = ft_lstnew(f(lst->content));
	if (!new_list)
		return (NULL);
	current = new_list;
	lst = lst->next;
	while (lst)
	{
		new_obj = ft_lstnew(f(lst->content));
		if (!new_obj)
		{
			ft_lstclear(&new_list, del);
			return (NULL);
		}
		current->next = new_obj;
		current = new_obj;
		lst = lst->next;
	}
	return (new_list);
}

// this implementation has a head node WITH data, see if that's correct

/*
// Sample deletion function
void delete_content(void *content)
{
    free(content); // Free the string content
}

// Helper function to print the list
void print_list(t_list *lst)
{
    while (lst)
    {
        printf("%s -> ", (char *)lst->content);
        lst = lst->next;
    }
    printf("NULL\n");
}

void *uppercase(void *content)
{
    char *str = (char *)content;
    char *new_str = strdup(str); // Duplicate the string
    if (!new_str)
        return NULL;

    for (int i = 0; new_str[i]; i++)
        if (new_str[i] >= 'a' && new_str[i] <= 'z')
            new_str[i] -= 32; // Convert to uppercase

    return new_str;
}

// Main function to test ft_lstmap
int main(void)
{
    // Create a linked list
    t_list *list = ft_lstnew(strdup("hello"));
    list->next = ft_lstnew(strdup("world"));
    list->next->next = ft_lstnew(strdup("libft"));
    list->next->next->next = NULL;

    printf("Original list:\n");
    print_list(list);

    // Apply ft_lstmap with the uppercase function
    t_list *new_list = ft_lstmap(list, &uppercase, &delete_content);

    printf("\nTransformed list:\n");
    print_list(new_list);

    // Free both lists
    ft_lstclear(&list, &delete_content);
    ft_lstclear(&new_list, &delete_content);

    return 0;
}*/



================================================
FILE: from_github/includes/libft/ft_lstnew_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:35 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*new_list;

	new_list = malloc(sizeof(t_list));
	if (new_list == NULL)
		return (NULL);
	new_list->content = content;
	new_list->next = NULL;
	return (new_list);
}



================================================
FILE: from_github/includes/libft/ft_lstsize_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:47 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:52 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_lstsize(t_list *lst)
{
	int		i;
	t_list	*ptr;

	i = 0;
	ptr = lst;
	while (ptr)
	{
		ptr = (ptr->next);
		i++;
	}
	return (i);
}

/* recursive way of
int			ft_lstsize(t_list *lst);
{
	return (rec_size(lst, 0));
}

static int	rec_size(t_list *node, int count)
{
	if (count > 9999)
	{
		write(1, "this list is tooo loooongggg <3", 31);
		return(count);
	}
	if(next_nd == NULL)
		return (count);
	return (rec_size(node -> next, count + 1));
}
*/



================================================
FILE: from_github/includes/libft/ft_memchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:29 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:32 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	char	*str;
	size_t	i;

	i = 0;
	str = (char *)s;
	while (i < n)
	{
		if ((unsigned char)str[i] == (unsigned char)c)
			return ((char *)s + i);
		i++;
	}
	return (NULL);
}



================================================
FILE: from_github/includes/libft/ft_memcmp.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:39 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:40 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	char	*str1;
	char	*str2;
	size_t	i;

	i = 0;
	str1 = (char *)s1;
	str2 = (char *)s2;
	while (i < n)
	{
		if (str1[i] != str2[i])
			return ((unsigned char)str1[i] - (unsigned char)str2[i]);
		i++;
	}
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_memcpy.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:50 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t	i;
	char	*d;
	char	*s;

	i = 0;
	d = (char *)dest;
	s = (char *)src;
	while (i < n)
	{
		d[i] = s[i];
		i++;
	}
	return (dest);
}



================================================
FILE: from_github/includes/libft/ft_memmove.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:03 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:05 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memmove(void *s1, const void *s2, size_t n)
{
	size_t	len;

	len = 0;
	if (s2 < s1)
	{
		len = n;
		while (len > 0)
		{
			len--;
			((unsigned char *)s1)[len] = ((unsigned char *)s2)[len];
		}
	}
	else
	{
		len = 0;
		while (len < n)
		{
			((unsigned char *)s1)[len] = ((unsigned char *)s2)[len];
			len++;
		}
	}
	return (s1);
}



================================================
FILE: from_github/includes/libft/ft_memset.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:15 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:17 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memset(void *b, int c, size_t len)
{
	unsigned char	*p;

	p = (unsigned char *)b;
	while (len > 0)
	{
		p[len - 1] = c;
		len--;
	}
	return (b);
}



================================================
FILE: from_github/includes/libft/ft_printf.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:28:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:09 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

static int	sp_print(char s, va_list *args, int *len);
int			h_pct(const char *str, int *idx, va_list *args, int *len);
int			h_chr(const char *str, int *idx, int *len);

int	ft_printf(const char *str, ...)
{
	va_list	args;
	int		idx;
	int		len;

	idx = 0;
	len = 0;
	va_start(args, str);
	while (str[idx] != '\0')
	{
		if (str[idx] == '%')
		{
			if (h_pct(str, &idx, &args, &len) == -1)
				return (-1);
		}
		else
		{
			if (h_chr(str, &idx, &len) == -1)
				return (-1);
		}
	}
	va_end(args);
	return (len);
}

static int	sp_print(char s, va_list *args, int *len)
{
	int	out;

	out = 0;
	if (s == 'c')
		out = put_charsum(va_arg(*args, int), len);
	else if (s == 's')
		out = str(va_arg(*args, char *), len);
	else if (s == 'd' || s == 'i')
		out = number(va_arg(*args, int), len);
	else if (s == 'x')
		out = hexadecimal_low(va_arg(*args, unsigned int), len);
	else if (s == 'X')
		out = hexadecimal_up(va_arg(*args, unsigned int), len);
	else if (s == 'u')
		out = unsigned_int(va_arg(*args, unsigned int), len);
	else if (s == 'p')
		out = print_ptr(va_arg(*args, size_t), len);
	else
		out = put_charsum(s, len);
	return (out);
}

int	h_pct(const char *str, int *idx, va_list *args, int *len)
{
	(*idx)++;
	if (sp_print(str[*idx], args, len) == -1)
		return (-1);
	(*idx)++;
	return (0);
}

int	h_chr(const char *str, int *idx, int *len)
{
	if (put_charsum(str[*idx], len) == -1)
		return (-1);
	(*idx)++;
	return (0);
}
/*
int main()
{
	// Test %c (single character)
	char c = 'A';
	printf("Test %%c:\n");
	printf("Expected: [%c]\n", c);
	ft_printf("Result:   [%c]\n\n", c);

	// Test %s (string)
	char *str = "Hello, world!";
	printf("Test %%s:\n");
	printf("Expected: [%s]\n", str);
	ft_printf("Result:   [%s]\n\n", str);

	// Test %p (pointer)
	void *ptr = &c;
	printf("Test %%p:\n");
	printf("Expected: [%p]\n", ptr);
	ft_printf("Result:   [%p]\n\n", ptr);

	// Test %d (decimal number)
	int d = -12345;
	printf("Test %%d:\n");
	printf("Expected: [%d]\n", d);
	ft_printf("Result:   [%d]\n\n", d);

	// Test %i (integer in base 10)
	int i = 6789;
	printf("Test %%i:\n");
	printf("Expected: [%i]\n", i);
	ft_printf("Result:   [%i]\n\n", i);

	// Test %u (unsigned decimal)
	unsigned int u = UINT_MAX;
	printf("Test %%u:\n");
	printf("Expected: [%u]\n", u);
	ft_printf("Result:   [%u]\n\n", u);

	// Test %x (hexadecimal lowercase)
	unsigned int x = 0xabcdef;
	printf("Test %%x:\n");
	printf("Expected: [%x]\n", x);
	ft_printf("Result:   [%x]\n\n", x);

	// Test %X (hexadecimal uppercase)
	unsigned int X = 0xABCDEF;
	printf("Test %%X:\n");
	printf("Expected: [%X]\n", X);
	ft_printf("Result:   [%X]\n\n", X);

	// Test %% (percent symbol)
	printf("Test %%%%:\n");
	printf("Expected: [%%]\n");
	ft_printf("Result:   [%%]\n\n");

	// Edge Cases
	printf("Edge Cases:\n");

	// Null string
	printf("Test %%s with NULL string:\n");
	printf("Expected: it is not meant to compile");
	ft_printf("Result:   [%s]\n", (char *)NULL);

	// Large integers
	printf("Test %%d with INT_MAX and INT_MIN:\n");
	printf("Expected: [%d] [%d]\n", INT_MAX, INT_MIN);
	ft_printf("Result:   [%d] [%d]\n\n", INT_MAX, INT_MIN);

	printf("Test %%u with 0:\n");
	printf("Expected: [%u]\n", 0);
	ft_printf("Result:   [%u]\n\n", 0);

	// Zero pointer
	printf("Test %%p with NULL pointer:\n");
	printf("Expected: [%p]\n", (void *)NULL);
	ft_printf("Result:   [%p]\n\n", (void *)NULL);

	// Hexadecimal with 0
	printf("Test %%x and %%X with 0:\n");
	printf("Expected: [%x] [%X]\n", 0, 0);
	ft_printf("Result:   [%x] [%X]\n\n", 0, 0);

	return 0;
}
*/



================================================
FILE: from_github/includes/libft/ft_printf.h
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:47:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:23 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FT_PRINTF_H
# define FT_PRINTF_H

// Standard C Libraries

# include <unistd.h>
# include <stdarg.h>
# include <stddef.h>
# include <stdlib.h>
# include <limits.h>
# include <stdio.h>

// ft_printf.c
int	ft_printf(const char *str, ...);
int	h_pct(const char *str, int *idx, va_list *args, int *len);
int	h_chr(const char *str, int *idx, int *len);

// print_types.c
int	put_charsum(const char c, int *len);
int	str(const char *str, int *len);
int	number(int nb, int *len);
int	unsigned_int(unsigned int u, int *len);

// print_hexptry.c
int	rec_ptr(size_t ptr, int *len);
int	print_ptr(size_t ptr, int *len);
int	hexadecimal_up(unsigned int x, int *len);
int	hexadecimal_low(unsigned int x, int *len);

#endif



================================================
FILE: from_github/includes/libft/ft_putchar_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:45 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:46 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}



================================================
FILE: from_github/includes/libft/ft_putendl_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:59 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:01 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	ft_putstr_fd(s, fd);
	write(fd, "\n", 1);
}



================================================
FILE: from_github/includes/libft/ft_putnbr_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:56:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:13 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	if (n == -2147483648)
		ft_putstr_fd("-2147483648", fd);
	else if (n < 0)
	{
		ft_putchar_fd('-', fd);
		ft_putnbr_fd(-n, fd);
	}
	else if (n >= 10)
	{
		ft_putnbr_fd(n / 10, fd);
		ft_putchar_fd(n % 10 + '0', fd);
	}
	else
		ft_putchar_fd(n + '0', fd);
}



================================================
FILE: from_github/includes/libft/ft_putstr_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:56:27 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:29 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	write(fd, s, ft_strlen(s));
}



================================================
FILE: from_github/includes/libft/ft_split.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:57:29 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:57:32 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>
#include <unistd.h>

static size_t	word_len(const char *str, char delim);
static size_t	count_words(const char *str, char delim);

char	**ft_split(char const *str, char delim)
{
	size_t	i;
	size_t	j;
	size_t	k;
	char	**mat;

	i = 0;
	k = 0;
	mat = (char **)malloc(sizeof(char *) * (count_words(str, delim) + 1));
	if (!str || !(mat))
		return (NULL);
	while (i < count_words(str, delim))
	{
		while (str[k] == delim)
			k++;
		mat[i] = (char *)malloc(sizeof(char) * (word_len(&str[k], delim) + 1));
		if (!(mat[i]))
			return (NULL);
		j = 0;
		while (str[k] != delim && str[k])
			mat[i][j++] = str[k++];
		mat[i][j] = '\0';
		i++;
	}
	mat[i] = NULL;
	return (mat);
}

static size_t	word_len(const char *str, char delim)
{
	size_t	len;

	len = 0;
	while (*str == delim)
		str++;
	while (*str != delim && *str++)
		len++;
	return (len);
}

static size_t	count_words(const char *str, char delim)
{
	size_t	count;

	count = 0;
	while (*str)
	{
		while (*str == delim)
			str++;
		if (*str && *str != delim)
		{
			count++;
			while (*str != delim && *str)
				str++;
		}
	}
	return (count);
}

/* int	main(void)
{
	char	**result;
	char	*test_str;
	char	delim;
	size_t	i;

	test_str = "hello   world   split this   string";
	delim = ' ';
	i = 0;
	// Call ft_split
	result = ft_split(test_str, delim);
	// Check and print the results
	if (!result)
	{
		printf("Error: ft_split returned NULL.\n");
		return (1);
	}
	printf("Original string: \"%s\"\n", test_str);
	printf("Split result:\n");
	while (result[i])
	{
		printf("result[%zu] = \"%s\"\n", i, result[i]);
		i++;
	}
	// Free allocated memory
	i = 0;
	while (result[i])
		free(result[i++]);
	free(result);
	return (0);
}
 */



================================================
FILE: from_github/includes/libft/ft_strchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:57:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:57:50 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strchr(const char *s, int i)
{
	while (*s)
	{
		if (*s == i)
			return ((char *)s);
		s++;
	}
	if (i == '\0')
		return ((char *)s);
	return (0);
}



================================================
FILE: from_github/includes/libft/ft_strdup.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:05 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:06 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strdup(const char *s)
{
	char	*str;
	int		i;
	int		j;

	i = 0;
	j = ft_strlen(s);
	str = (char *)malloc(sizeof(*str) * (j + 1));
	if (str == NULL)
		return (NULL);
	while (i < j)
	{
		str[i] = s[i];
		i++;
	}
	str[i] = '\0';
	return (str);
}



================================================
FILE: from_github/includes/libft/ft_striteri.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:18 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:19 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char*))
{
	unsigned int	i;

	i = 0;
	while (s[i] != '\0')
	{
		f(i, s + i);
		i++;
	}
}



================================================
FILE: from_github/includes/libft/ft_strjoin.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:33 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:35 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// check if the NULL checks are correct? 

char	*ft_strjoin(char const *s1, char const *s2)
{
	int		i;
	int		j;
	char	*str;

	if (!s1)
		s1 = "";
	if (!s2)
		s2 = "";
	i = 0;
	j = 0;
	str = (char *)malloc(sizeof(char) * (ft_strlen(s1) + ft_strlen(s2) + 1));
	if (str == NULL)
		return (NULL);
	while (s1[i] != '\0')
	{
		str[i] = s1[i];
		i++;
	}
	while (s2[j] != '\0')
	{
		str[i + j] = s2[j];
		j++;
	}
	str[i + j] = '\0';
	return (str);
}



================================================
FILE: from_github/includes/libft/ft_strlcat.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:45 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:46 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// this implementatioin is very sus, double-check

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	i;
	size_t	j;
	size_t	dst_len;
	size_t	src_len;

	if (size == 0)
		return (ft_strlen(src));
	i = 0;
	j = 0;
	while (dst[i] != '\0' && i < size)
		i++;
	dst_len = i;
	src_len = ft_strlen(src);
	while (src[j] != '\0' && i < size - 1)
	{
		dst[i] = src[j];
		i++;
		j++;
	}
	if (i < size)
		dst[i] = '\0';
	return (dst_len + src_len);
}



================================================
FILE: from_github/includes/libft/ft_strlcpy.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 19:03:49 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/**
 * @brief Copies up to @p size - 1 characters from the string pointed to by @p src to the buffer pointed to by @p dest, null-terminating the result.
 *
 * This function is designed to be safer and more consistent than `strncpy`.
 * It guarantees null-termination of the destination buffer (as long as @p size is greater than 0).
 * It also returns the total length of the source string, not the number of bytes copied.
 *
 * @param dest A pointer to the destination buffer where the string will be copied.
 * @param src A pointer to the source string to be copied.
 * @param size The size of the destination buffer. This should include space for the null terminator.
 * @return The total length of the string pointed to by @p src, excluding the null terminator.
 * If @p size is 0, the function iterates through @p src to calculate its length and returns that value without writing to @p dest.
 */
size_t	ft_strlcpy(char *dest, const char *src, size_t size)
{
	size_t	i;

	i = 0;
	if (size == 0)
	{
		while (src[i])
			i++;
		return (i);
	}
	while (src[i] != '\0' && i < size - 1)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	while (src[i] != '\0')
		i++;
	return (i);
}



================================================
FILE: from_github/includes/libft/ft_strlen.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:28 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:30 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>

int	ft_strlen(const char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

/*
void main()
{
	char *str = "This is a string"; 
	int len = strlen(str);
	printf("h%i", len);
	return;
}
*/



================================================
FILE: from_github/includes/libft/ft_strmapi.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:40 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:40 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	unsigned int	i;
	char			*str;

	if (!s ||!f)
		return (NULL);
	i = 0;
	str = (char *)malloc(sizeof(char) * (ft_strlen(s)) + 1);
	if (str == NULL)
		return (NULL);
	while (s[i] != '\0')
	{
		str[i] = f(i, s[i]);
		i++;
	}
	str[i] = '\0';
	return (str);
}



================================================
FILE: from_github/includes/libft/ft_strncmp.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:55 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:58 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	while (n > 0 && *s1 != '\0' && *s1 == *s2)
	{
		s1++;
		s2++;
		n--;
	}
	if (n == 0)
		return (0);
	return ((unsigned char)*s1 - (unsigned char)*s2);
}

/*
void main()
{
	char *s1 = "This is srting A slfhosiboilndfisdfxiosdkfmx";
	char *s2 = "This is string B   lalala";

	int dif = ft_strncmp(s1, s2, 16);
	prtinf("%i", dif);
	return;
}
*/



================================================
FILE: from_github/includes/libft/ft_strnstr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:12 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:13 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// apparently the stadard lib doesn't handle cases where needle == NULL

char	*ft_strnstr(const char *haystack, const char *needle, size_t n)
{
	size_t	i;
	size_t	j;
	char	*editable_haystack;

	editable_haystack = (char *)haystack;
	i = 0;
	j = 0;
	if (needle == NULL || needle[0] == '\0')
		return (editable_haystack);
	while (editable_haystack[i] != '\0' && i < n)
	{
		if (editable_haystack[i] == needle[j])
		{
			while (editable_haystack[i + j] == needle[j] && i + j < n)
			{
				if (needle[j + 1] == '\0')
					return (editable_haystack + i);
				j++;
			}
			j = 0;
		}
		i++;
	}
	return (NULL);
}



================================================
FILE: from_github/includes/libft/ft_strrchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:28 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:30 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strrchr(const char *s, int c)
{
	int		i;

	i = ft_strlen(s);
	if (c == 0)
		return ((char *)s + i);
	while (i >= 0)
	{
		if (s[i] == c)
			return ((char *)s + i);
		i--;
	}
	return (NULL);
}



================================================
FILE: from_github/includes/libft/ft_strtrim.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:42 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:45 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strtrim(char const *s1, char const *set)
{
	size_t	i;
	size_t	j;
	char	*str;

	if (!s1 || !set)
		return (NULL);
	i = 0;
	j = ft_strlen(s1);
	while (s1[i] && ft_strchr(set, s1[i]))
		i++;
	while (j > i && ft_strchr(set, s1[j - 1]))
		j--;
	str = ft_substr(s1, i, j - i);
	if (!str)
		return (NULL);
	return (str);
}



================================================
FILE: from_github/includes/libft/ft_substr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:13 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:15 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	size_t	i;
	size_t	j;
	char	*str;

	if (!s)
		return (NULL);
	if (start >= (unsigned int)ft_strlen(s))
		return (ft_strdup(""));
	str = (char *)malloc(sizeof(char) * (len + 1));
	if (str == NULL)
		return (NULL);
	i = start;
	j = 0;
	while (s[i] && j < len)
	{
		str[j] = s[i];
		j++;
		i++;
	}
	str[j] = '\0';
	return (str);
}



================================================
FILE: from_github/includes/libft/ft_tolower.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:26 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_tolower(int i)
{
	if (i >= 'A' && i <= 'Z')
		return (i + 32);
	return (i);
}



================================================
FILE: from_github/includes/libft/ft_toupper.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:33 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:36 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_toupper(int i)
{
	if (i >= 'a' && i <= 'z')
		return (i - 32);
	return (i);
}



================================================
FILE: from_github/includes/libft/libft.h
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:50 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:49:04 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include "ft_printf.h"
# include <stdlib.h>
# include <unistd.h>

typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}					t_list;

t_list	*ft_lstlast(t_list *lst);
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *));
t_list	*ft_lstnew(void *content);
void	ft_lstadd_back(t_list **alst, t_list *new);
void	ft_lstadd_front(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void *));
void	ft_lstdelone(t_list *lst, void (*del)(void *));
void	ft_lstiter(t_list *lst, void (*f)(void *));
int		ft_lstsize(t_list *lst);
int		ft_atoi(const char *str);
void	ft_bzero(void *s, size_t n);
void	*ft_calloc(size_t count, size_t size);
int		ft_isalnum(int i);
int		ft_isalpha(int i);
int		ft_isascii(int i);
int		ft_isdigit(int i);
int		ft_isprint(int i);
void	*ft_memchr(const void *s, int c, size_t n);
int		ft_memcmp(const void *s1, const void *s2, size_t n);
void	*ft_memcpy(void *dest, const void *src, size_t n);
void	*ft_memmove(void *s1, const void *s2, size_t n);
void	*ft_memset(void *b, int c, size_t len);
char	*ft_strchr(const char *s, int i);
char	*ft_strdup(const char *s);
size_t	ft_strlcat(char *dest, const char *src, size_t size);
size_t	ft_strlcpy(char *dest, const char *src, size_t size);
int		ft_strlen(const char *str);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
char	*ft_strnstr(const char *haystack, const char *needle, size_t len);
char	*ft_strrchr(const char *s, int c);
int		ft_tolower(int i);
int		ft_toupper(int i);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strjoin(char const *s1, char const *s2);
char	*ft_strtrim(char const *s1, char const *set);
char	**ft_split(char const *str, char c);
char	*ft_itoa(int n);
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
void	ft_striteri(char *s, void (*f)(unsigned int, char*));
void	ft_putchar_fd(char c, int fd);
void	ft_putstr_fd(char *s, int fd);
void	ft_putendl_fd(char *s, int fd);
void	ft_putnbr_fd(int n, int fd);

#endif



================================================
FILE: from_github/includes/libft/main_test.c
================================================

#include "libft.h"

int main (void)
{
	ft_printf("holw\n");
	int len = ft_strlen("hello");
	// ft_printf("hello");
	return (len);
}



================================================
FILE: from_github/includes/libft/Makefile
================================================
NAME = libft.a

# Mandatory libft functions
SRCS = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c \
       ft_isdigit.c ft_isprint.c ft_itoa.c ft_memchr.c ft_memcmp.c ft_memcpy.c \
       ft_memmove.c ft_memset.c ft_putchar_fd.c ft_putendl_fd.c ft_putnbr_fd.c \
       ft_putstr_fd.c ft_split.c ft_strchr.c ft_strdup.c ft_striteri.c \
       ft_strjoin.c ft_strlcat.c ft_strlcpy.c ft_strlen.c ft_strmapi.c \
       ft_strncmp.c ft_strnstr.c ft_strrchr.c ft_strtrim.c ft_substr.c \
       ft_tolower.c ft_toupper.c

# Bonus functions
BONUS_SRCS = ft_lstadd_back_bonus.c ft_lstadd_front_bonus.c ft_lstclear_bonus.c \
             ft_lstdelone_bonus.c ft_lstiter_bonus.c ft_lstlast_bonus.c \
             ft_lstmap_bonus.c ft_lstnew_bonus.c ft_lstsize_bonus.c

# ft_printf functions (included as part of this libft)
PRINTF_SRCS = ft_printf.c print_hexptry.c print_types.c

# All sources combined for default compilation
ALL_SRCS = $(SRCS) $(PRINTF_SRCS)

# Object files
OBJS = $(ALL_SRCS:.c=.o)
BONUS_OBJS = $(BONUS_SRCS:.c=.o)

# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror

# Headers
HEADERS = libft.h ft_printf.h

# Default target
all: $(NAME)

# Create the library with mandatory and printf functions
$(NAME): $(OBJS)
	ar rcs $(NAME) $(OBJS)

# Bonus rule - adds bonus functions to existing library
bonus: $(OBJS) $(BONUS_OBJS)
	ar rcs $(NAME) $(OBJS) $(BONUS_OBJS)

# Compile object files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean object files
clean:
	rm -f $(OBJS) $(BONUS_OBJS)

# Clean everything
fclean: clean
	rm -f $(NAME)

# Rebuild
re: fclean all

# Phony targets
.PHONY: all bonus clean fclean re


================================================
FILE: from_github/includes/libft/print_hexptry.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_hexptry.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/17 22:24:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:21 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	rec_ptr(size_t ptr, int *len)
{
	const char	*hex_arr = "0123456789abcdef";

	if (ptr >= 16)
	{
		if (rec_ptr(ptr / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[ptr % 16], len) == -1)
		return (-1);
	return (0);
}

// too many functions from here on

int	print_ptr(size_t ptr, int *len)
{
	if (ptr == 0)
	{
		if (str("(nil)", len) == -1)
			return (-1);
	}
	else
	{
		if (str("0x", len) == -1)
			return (-1);
		if (rec_ptr(ptr, len) == -1)
			return (-1);
	}
	return (0);
}

int	hexadecimal_up(unsigned int x, int *len)
{
	const char	*hex_arr = "0123456789ABCDEF";

	if (x == 0)
	{
		if (put_charsum('0', len) == -1)
			return (-1);
		return (0);
	}
	if (x >= 16)
	{
		if (hexadecimal_up(x / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[x % 16], len) == -1)
		return (-1);
	return (0);
}

int	hexadecimal_low(unsigned int x, int *len)
{
	const char	*hex_arr = "0123456789abcdef";

	if (x == 0)
	{
		if (put_charsum('0', len) == -1)
			return (-1);
		return (0);
	}
	if (x >= 16)
	{
		if (hexadecimal_low(x / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[x % 16], len) == -1)
		return (-1);
	return (0);
}



================================================
FILE: from_github/includes/libft/print_types.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_types.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:29:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:18 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	put_charsum(const char c, int *len)
{
	if (write(1, &c, 1) == -1)
		return (-1);
	(*len)++;
	return (0);
}

int	str(const char *str, int *len)
{
	int	i;

	i = 0;
	if (str == NULL)
	{
		if (write(1, "(null)", 6) == -1)
			return (-1);
		(*len) += 6;
		return (0);
	}
	while (str[i] != '\0')
	{
		if (put_charsum(str[i], len) == -1)
			return (-1);
		i++;
	}
	return (0);
}

int	number(int nb, int *len)
{
	if (nb == INT_MIN)
	{
		if (write(1, "-2147483648", 11) == -1)
			return (-1);
		(*len) += 11;
		return (0);
	}
	if (nb < 0)
	{
		if (put_charsum('-', len) == -1)
			return (-1);
		nb *= -1;
	}
	if (nb >= 10)
	{
		if (number(nb / 10, len) == -1)
			return (-1);
	}
	if (put_charsum((nb % 10 + '0'), len) == -1)
		return (-1);
	return (0);
}

int	unsigned_int(unsigned int u, int *len)
{
	if (u >= 10)
	{
		if (unsigned_int(u / 10, len) == -1)
			return (-1);
	}
	if (put_charsum(u % 10 + '0', len) == -1)
		return (-1);
	return (0);
}



================================================
FILE: includes/libft/ft_atoi.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:49:54 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:49:57 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_atoi(const char *str)
{
	int	i;
	int	neg;
	int	res;

	i = 0;
	neg = 1;
	res = 0;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			neg *= -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		res = (str[i] - '0') + (res * 10);
		i++;
	}
	return (res * neg);
}



================================================
FILE: includes/libft/ft_bzero.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:14 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	ft_memset(s, 0, n);
}



================================================
FILE: includes/libft/ft_calloc.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:26 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// chat says this doesn't handle the case were (count * size) > INT_MAX

void	*ft_calloc(size_t count, size_t size)
{
	size_t	b;
	void	*p;

	if (count == 0 || size == 0)
	{
		count = 1;
		size = 1;
	}
	b = count * size;
	p = malloc(b);
	if (p == NULL)
		return (NULL);
	else
		ft_bzero(p, b);
	return (p);
}



================================================
FILE: includes/libft/ft_isalnum.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:39 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:41 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int i)
{
	if ((i >= 'a' && i <= 'z') || (i >= 'A' && i <= 'Z') || (i >= '0'
			&& i <= '9'))
		return (1);
	return (0);
}



================================================
FILE: includes/libft/ft_isalpha.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:50:52 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:50:54 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalpha(int i)
{
	if (('a' <= i && i <= 'z') || ('A' <= i && i <= 'Z'))
		return (1);
	return (0);
}



================================================
FILE: includes/libft/ft_isascii.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:12 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isascii(int i)
{
	if (i >= 0 && i <= 127)
		return (1);
	return (0);
}



================================================
FILE: includes/libft/ft_isdigit.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:22 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:24 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isdigit(int i)
{
	while ('0' <= i && i <= '9')
		return (1);
	return (0);
}



================================================
FILE: includes/libft/ft_isprint.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:32 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:33 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isprint(int i)
{
	if (i >= 32 && i <= 126)
		return (1);
	return (0);
}



================================================
FILE: includes/libft/ft_itoa.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:51:46 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:51:47 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static unsigned int	ft_number_size(int number);

char	*ft_itoa(int n)
{
	char			*string;
	unsigned int	number;
	unsigned int	length;

	length = ft_number_size(n);
	string = (char *)malloc(sizeof(char) * (length + 1));
	if (string == NULL)
		return (NULL);
	if (n < 0)
	{
		string[0] = '-';
		number = -n;
	}
	else
		number = n;
	if (number == 0)
		string[0] = '0';
	string[length] = '\0';
	while (number != 0)
	{
		string[length - 1] = (number % 10) + '0';
		number = number / 10;
		length--;
	}
	return (string);
}

static unsigned int	ft_number_size(int number)
{
	unsigned int	length;

	length = 0;
	if (number == 0)
		return (1);
	if (number < 0)
		length += 1;
	while (number != 0)
	{
		number /= 10;
		length++;
	}
	return (length);
}



================================================
FILE: includes/libft/ft_lstadd_back_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:04 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:05 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstadd_back(t_list **alst, t_list *new)
{
	t_list	*last;

	if (new == NULL)
		return ;
	if (*alst == NULL)
	{
		*alst = new;
	}
	else
	{
		last = ft_lstlast(*alst);
		last->next = new;
	}
	new->next = NULL;
}



================================================
FILE: includes/libft/ft_lstadd_front_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:20 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:22 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// need to check documentation
// --- if(!(*lst))
// --- --- then should I make new the fist (new) elemnt
// in the list (like in add_back)
// Do the safety check in the front?

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (new == NULL)
		return ;
	new->next = *lst;
	*lst = new;
}



================================================
FILE: includes/libft/ft_lstclear_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:32 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:52:33 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*next_1;

	if (!lst || !del)
		return ;
	while (*lst != NULL)
	{
		next_1 = (*lst)->next;
		del((*lst)->content);
		free(*lst);
		*lst = next_1;
	}
	*lst = NULL;
}

/* og implementation
void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*current_0;
	t_list	*next_1;

	if(!lst || !del)
		return ;
	current_0 = *lst;
	while(current_0 != NULL)
	{
		next_1 = current_0 -> next;
		del(current_0 -> content);
		free(current_0);
		current_0 = next_1;
	}
	*lst = NULL;
}
*/



================================================
FILE: includes/libft/ft_lstdelone_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:46 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:02:53 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	del(lst->content);
	free(lst);
}
// MAKE SURE YOU DOUBLE CHECK THIS FUNCTION 
// ---- WHEN YOU GET INTO 42, SOME OF THIS SHIT IS LIKE HELLA STUPID

// del(*void) is used to free 
// ---- the memory allocated to *content (the studd at the end of the ptr)
// free(lst) then frees the s_list structure (including deleting the *next)
// if done in the middle of a 
// ---- list (say x) this would create a (x-1) dangling pointer and a ()



================================================
FILE: includes/libft/ft_lstiter_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:52:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:04:07 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (!lst || !f)
		return ;
	while (lst != NULL)
	{
		f(lst->content);
		lst = lst->next;
	}
}

// here the use of a next ptr isn't needed
// because you can just assign next ptr value after applying f()

// need to chek in your code if you used the defensive
// t_list *tmp just here, or in other parts too



================================================
FILE: includes/libft/ft_lstlast_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:11 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (!lst)
		return (NULL);
	while ((lst->next) != NULL)
	{
		lst = lst->next;
	}
	return (lst);
}



================================================
FILE: includes/libft/ft_lstmap_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:22 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:23 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <string.h>

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*new_list;
	t_list	*new_obj;
	t_list	*current;

	if (!lst || !f || !del)
		return (NULL);
	new_list = ft_lstnew(f(lst->content));
	if (!new_list)
		return (NULL);
	current = new_list;
	lst = lst->next;
	while (lst)
	{
		new_obj = ft_lstnew(f(lst->content));
		if (!new_obj)
		{
			ft_lstclear(&new_list, del);
			return (NULL);
		}
		current->next = new_obj;
		current = new_obj;
		lst = lst->next;
	}
	return (new_list);
}

// this implementation has a head node WITH data, see if that's correct

/*
// Sample deletion function
void delete_content(void *content)
{
    free(content); // Free the string content
}

// Helper function to print the list
void print_list(t_list *lst)
{
    while (lst)
    {
        printf("%s -> ", (char *)lst->content);
        lst = lst->next;
    }
    printf("NULL\n");
}

void *uppercase(void *content)
{
    char *str = (char *)content;
    char *new_str = strdup(str); // Duplicate the string
    if (!new_str)
        return NULL;

    for (int i = 0; new_str[i]; i++)
        if (new_str[i] >= 'a' && new_str[i] <= 'z')
            new_str[i] -= 32; // Convert to uppercase

    return new_str;
}

// Main function to test ft_lstmap
int main(void)
{
    // Create a linked list
    t_list *list = ft_lstnew(strdup("hello"));
    list->next = ft_lstnew(strdup("world"));
    list->next->next = ft_lstnew(strdup("libft"));
    list->next->next->next = NULL;

    printf("Original list:\n");
    print_list(list);

    // Apply ft_lstmap with the uppercase function
    t_list *new_list = ft_lstmap(list, &uppercase, &delete_content);

    printf("\nTransformed list:\n");
    print_list(new_list);

    // Free both lists
    ft_lstclear(&list, &delete_content);
    ft_lstclear(&new_list, &delete_content);

    return 0;
}*/



================================================
FILE: includes/libft/ft_lstnew_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:35 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*new_list;

	new_list = malloc(sizeof(t_list));
	if (new_list == NULL)
		return (NULL);
	new_list->content = content;
	new_list->next = NULL;
	return (new_list);
}



================================================
FILE: includes/libft/ft_lstsize_bonus.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:53:47 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:53:52 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_lstsize(t_list *lst)
{
	int		i;
	t_list	*ptr;

	i = 0;
	ptr = lst;
	while (ptr)
	{
		ptr = (ptr->next);
		i++;
	}
	return (i);
}

/* recursive way of
int			ft_lstsize(t_list *lst);
{
	return (rec_size(lst, 0));
}

static int	rec_size(t_list *node, int count)
{
	if (count > 9999)
	{
		write(1, "this list is tooo loooongggg <3", 31);
		return(count);
	}
	if(next_nd == NULL)
		return (count);
	return (rec_size(node -> next, count + 1));
}
*/



================================================
FILE: includes/libft/ft_memchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:29 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:32 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	char	*str;
	size_t	i;

	i = 0;
	str = (char *)s;
	while (i < n)
	{
		if ((unsigned char)str[i] == (unsigned char)c)
			return ((char *)s + i);
		i++;
	}
	return (NULL);
}



================================================
FILE: includes/libft/ft_memcmp.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:39 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:40 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	char	*str1;
	char	*str2;
	size_t	i;

	i = 0;
	str1 = (char *)s1;
	str2 = (char *)s2;
	while (i < n)
	{
		if (str1[i] != str2[i])
			return ((unsigned char)str1[i] - (unsigned char)str2[i]);
		i++;
	}
	return (0);
}



================================================
FILE: includes/libft/ft_memcpy.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:54:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:54:50 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	size_t	i;
	char	*d;
	char	*s;

	i = 0;
	d = (char *)dest;
	s = (char *)src;
	while (i < n)
	{
		d[i] = s[i];
		i++;
	}
	return (dest);
}



================================================
FILE: includes/libft/ft_memmove.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:03 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:05 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memmove(void *s1, const void *s2, size_t n)
{
	size_t	len;

	len = 0;
	if (s2 < s1)
	{
		len = n;
		while (len > 0)
		{
			len--;
			((unsigned char *)s1)[len] = ((unsigned char *)s2)[len];
		}
	}
	else
	{
		len = 0;
		while (len < n)
		{
			((unsigned char *)s1)[len] = ((unsigned char *)s2)[len];
			len++;
		}
	}
	return (s1);
}



================================================
FILE: includes/libft/ft_memset.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:15 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:17 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memset(void *b, int c, size_t len)
{
	unsigned char	*p;

	p = (unsigned char *)b;
	while (len > 0)
	{
		p[len - 1] = c;
		len--;
	}
	return (b);
}



================================================
FILE: includes/libft/ft_printf.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:28:34 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:09 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

static int	sp_print(char s, va_list *args, int *len);
int			h_pct(const char *str, int *idx, va_list *args, int *len);
int			h_chr(const char *str, int *idx, int *len);

int	ft_printf(const char *str, ...)
{
	va_list	args;
	int		idx;
	int		len;

	idx = 0;
	len = 0;
	va_start(args, str);
	while (str[idx] != '\0')
	{
		if (str[idx] == '%')
		{
			if (h_pct(str, &idx, &args, &len) == -1)
				return (-1);
		}
		else
		{
			if (h_chr(str, &idx, &len) == -1)
				return (-1);
		}
	}
	va_end(args);
	return (len);
}

static int	sp_print(char s, va_list *args, int *len)
{
	int	out;

	out = 0;
	if (s == 'c')
		out = put_charsum(va_arg(*args, int), len);
	else if (s == 's')
		out = str(va_arg(*args, char *), len);
	else if (s == 'd' || s == 'i')
		out = number(va_arg(*args, int), len);
	else if (s == 'x')
		out = hexadecimal_low(va_arg(*args, unsigned int), len);
	else if (s == 'X')
		out = hexadecimal_up(va_arg(*args, unsigned int), len);
	else if (s == 'u')
		out = unsigned_int(va_arg(*args, unsigned int), len);
	else if (s == 'p')
		out = print_ptr(va_arg(*args, size_t), len);
	else
		out = put_charsum(s, len);
	return (out);
}

int	h_pct(const char *str, int *idx, va_list *args, int *len)
{
	(*idx)++;
	if (sp_print(str[*idx], args, len) == -1)
		return (-1);
	(*idx)++;
	return (0);
}

int	h_chr(const char *str, int *idx, int *len)
{
	if (put_charsum(str[*idx], len) == -1)
		return (-1);
	(*idx)++;
	return (0);
}
/*
int main()
{
	// Test %c (single character)
	char c = 'A';
	printf("Test %%c:\n");
	printf("Expected: [%c]\n", c);
	ft_printf("Result:   [%c]\n\n", c);

	// Test %s (string)
	char *str = "Hello, world!";
	printf("Test %%s:\n");
	printf("Expected: [%s]\n", str);
	ft_printf("Result:   [%s]\n\n", str);

	// Test %p (pointer)
	void *ptr = &c;
	printf("Test %%p:\n");
	printf("Expected: [%p]\n", ptr);
	ft_printf("Result:   [%p]\n\n", ptr);

	// Test %d (decimal number)
	int d = -12345;
	printf("Test %%d:\n");
	printf("Expected: [%d]\n", d);
	ft_printf("Result:   [%d]\n\n", d);

	// Test %i (integer in base 10)
	int i = 6789;
	printf("Test %%i:\n");
	printf("Expected: [%i]\n", i);
	ft_printf("Result:   [%i]\n\n", i);

	// Test %u (unsigned decimal)
	unsigned int u = UINT_MAX;
	printf("Test %%u:\n");
	printf("Expected: [%u]\n", u);
	ft_printf("Result:   [%u]\n\n", u);

	// Test %x (hexadecimal lowercase)
	unsigned int x = 0xabcdef;
	printf("Test %%x:\n");
	printf("Expected: [%x]\n", x);
	ft_printf("Result:   [%x]\n\n", x);

	// Test %X (hexadecimal uppercase)
	unsigned int X = 0xABCDEF;
	printf("Test %%X:\n");
	printf("Expected: [%X]\n", X);
	ft_printf("Result:   [%X]\n\n", X);

	// Test %% (percent symbol)
	printf("Test %%%%:\n");
	printf("Expected: [%%]\n");
	ft_printf("Result:   [%%]\n\n");

	// Edge Cases
	printf("Edge Cases:\n");

	// Null string
	printf("Test %%s with NULL string:\n");
	printf("Expected: it is not meant to compile");
	ft_printf("Result:   [%s]\n", (char *)NULL);

	// Large integers
	printf("Test %%d with INT_MAX and INT_MIN:\n");
	printf("Expected: [%d] [%d]\n", INT_MAX, INT_MIN);
	ft_printf("Result:   [%d] [%d]\n\n", INT_MAX, INT_MIN);

	printf("Test %%u with 0:\n");
	printf("Expected: [%u]\n", 0);
	ft_printf("Result:   [%u]\n\n", 0);

	// Zero pointer
	printf("Test %%p with NULL pointer:\n");
	printf("Expected: [%p]\n", (void *)NULL);
	ft_printf("Result:   [%p]\n\n", (void *)NULL);

	// Hexadecimal with 0
	printf("Test %%x and %%X with 0:\n");
	printf("Expected: [%x] [%X]\n", 0, 0);
	ft_printf("Result:   [%x] [%X]\n\n", 0, 0);

	return 0;
}
*/



================================================
FILE: includes/libft/ft_printf.h
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:47:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:23 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FT_PRINTF_H
# define FT_PRINTF_H

// Standard C Libraries

# include <unistd.h>
# include <stdarg.h>
# include <stddef.h>
# include <stdlib.h>
# include <limits.h>
# include <stdio.h>

// ft_printf.c
int	ft_printf(const char *str, ...);
int	h_pct(const char *str, int *idx, va_list *args, int *len);
int	h_chr(const char *str, int *idx, int *len);

// print_types.c
int	put_charsum(const char c, int *len);
int	str(const char *str, int *len);
int	number(int nb, int *len);
int	unsigned_int(unsigned int u, int *len);

// print_hexptry.c
int	rec_ptr(size_t ptr, int *len);
int	print_ptr(size_t ptr, int *len);
int	hexadecimal_up(unsigned int x, int *len);
int	hexadecimal_low(unsigned int x, int *len);

#endif



================================================
FILE: includes/libft/ft_putchar_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:45 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:55:46 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}



================================================
FILE: includes/libft/ft_putendl_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:55:59 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:01 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	ft_putstr_fd(s, fd);
	write(fd, "\n", 1);
}



================================================
FILE: includes/libft/ft_putnbr_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:56:10 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:13 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	if (n == -2147483648)
		ft_putstr_fd("-2147483648", fd);
	else if (n < 0)
	{
		ft_putchar_fd('-', fd);
		ft_putnbr_fd(-n, fd);
	}
	else if (n >= 10)
	{
		ft_putnbr_fd(n / 10, fd);
		ft_putchar_fd(n % 10 + '0', fd);
	}
	else
		ft_putchar_fd(n + '0', fd);
}



================================================
FILE: includes/libft/ft_putstr_fd.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:56:27 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:56:29 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	write(fd, s, ft_strlen(s));
}



================================================
FILE: includes/libft/ft_split.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:57:29 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:57:32 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>
#include <unistd.h>

static size_t	word_len(const char *str, char delim);
static size_t	count_words(const char *str, char delim);

char	**ft_split(char const *str, char delim)
{
	size_t	i;
	size_t	j;
	size_t	k;
	char	**mat;

	i = 0;
	k = 0;
	mat = (char **)malloc(sizeof(char *) * (count_words(str, delim) + 1));
	if (!str || !(mat))
		return (NULL);
	while (i < count_words(str, delim))
	{
		while (str[k] == delim)
			k++;
		mat[i] = (char *)malloc(sizeof(char) * (word_len(&str[k], delim) + 1));
		if (!(mat[i]))
			return (NULL);
		j = 0;
		while (str[k] != delim && str[k])
			mat[i][j++] = str[k++];
		mat[i][j] = '\0';
		i++;
	}
	mat[i] = NULL;
	return (mat);
}

static size_t	word_len(const char *str, char delim)
{
	size_t	len;

	len = 0;
	while (*str == delim)
		str++;
	while (*str != delim && *str++)
		len++;
	return (len);
}

static size_t	count_words(const char *str, char delim)
{
	size_t	count;

	count = 0;
	while (*str)
	{
		while (*str == delim)
			str++;
		if (*str && *str != delim)
		{
			count++;
			while (*str != delim && *str)
				str++;
		}
	}
	return (count);
}

/* int	main(void)
{
	char	**result;
	char	*test_str;
	char	delim;
	size_t	i;

	test_str = "hello   world   split this   string";
	delim = ' ';
	i = 0;
	// Call ft_split
	result = ft_split(test_str, delim);
	// Check and print the results
	if (!result)
	{
		printf("Error: ft_split returned NULL.\n");
		return (1);
	}
	printf("Original string: \"%s\"\n", test_str);
	printf("Split result:\n");
	while (result[i])
	{
		printf("result[%zu] = \"%s\"\n", i, result[i]);
		i++;
	}
	// Free allocated memory
	i = 0;
	while (result[i])
		free(result[i++]);
	free(result);
	return (0);
}
 */



================================================
FILE: includes/libft/ft_strchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:57:48 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:57:50 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strchr(const char *s, int i)
{
	while (*s)
	{
		if (*s == i)
			return ((char *)s);
		s++;
	}
	if (i == '\0')
		return ((char *)s);
	return (0);
}



================================================
FILE: includes/libft/ft_strdup.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:05 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:06 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strdup(const char *s)
{
	char	*str;
	int		i;
	int		j;

	i = 0;
	j = ft_strlen(s);
	str = (char *)malloc(sizeof(*str) * (j + 1));
	if (str == NULL)
		return (NULL);
	while (i < j)
	{
		str[i] = s[i];
		i++;
	}
	str[i] = '\0';
	return (str);
}



================================================
FILE: includes/libft/ft_striteri.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:18 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:19 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char*))
{
	unsigned int	i;

	i = 0;
	while (s[i] != '\0')
	{
		f(i, s + i);
		i++;
	}
}



================================================
FILE: includes/libft/ft_strjoin.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:33 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:35 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// check if the NULL checks are correct? 

char	*ft_strjoin(char const *s1, char const *s2)
{
	int		i;
	int		j;
	char	*str;

	if (!s1)
		s1 = "";
	if (!s2)
		s2 = "";
	i = 0;
	j = 0;
	str = (char *)malloc(sizeof(char) * (ft_strlen(s1) + ft_strlen(s2) + 1));
	if (str == NULL)
		return (NULL);
	while (s1[i] != '\0')
	{
		str[i] = s1[i];
		i++;
	}
	while (s2[j] != '\0')
	{
		str[i + j] = s2[j];
		j++;
	}
	str[i + j] = '\0';
	return (str);
}



================================================
FILE: includes/libft/ft_strlcat.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:45 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:58:46 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// this implementatioin is very sus, double-check

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	i;
	size_t	j;
	size_t	dst_len;
	size_t	src_len;

	if (size == 0)
		return (ft_strlen(src));
	i = 0;
	j = 0;
	while (dst[i] != '\0' && i < size)
		i++;
	dst_len = i;
	src_len = ft_strlen(src);
	while (src[j] != '\0' && i < size - 1)
	{
		dst[i] = src[j];
		i++;
		j++;
	}
	if (i < size)
		dst[i] = '\0';
	return (dst_len + src_len);
}



================================================
FILE: includes/libft/ft_strlcpy.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:58:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 19:03:49 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/**
 * @brief Copies up to @p size - 1 characters from the string pointed to by @p src to the buffer pointed to by @p dest, null-terminating the result.
 *
 * This function is designed to be safer and more consistent than `strncpy`.
 * It guarantees null-termination of the destination buffer (as long as @p size is greater than 0).
 * It also returns the total length of the source string, not the number of bytes copied.
 *
 * @param dest A pointer to the destination buffer where the string will be copied.
 * @param src A pointer to the source string to be copied.
 * @param size The size of the destination buffer. This should include space for the null terminator.
 * @return The total length of the string pointed to by @p src, excluding the null terminator.
 * If @p size is 0, the function iterates through @p src to calculate its length and returns that value without writing to @p dest.
 */
size_t	ft_strlcpy(char *dest, const char *src, size_t size)
{
	size_t	i;

	i = 0;
	if (size == 0)
	{
		while (src[i])
			i++;
		return (i);
	}
	while (src[i] != '\0' && i < size - 1)
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	while (src[i] != '\0')
		i++;
	return (i);
}



================================================
FILE: includes/libft/ft_strlen.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:28 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:30 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>

int	ft_strlen(const char *str)
{
	int	i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

/*
void main()
{
	char *str = "This is a string"; 
	int len = strlen(str);
	printf("h%i", len);
	return;
}
*/



================================================
FILE: includes/libft/ft_strmapi.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:40 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:40 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	unsigned int	i;
	char			*str;

	if (!s ||!f)
		return (NULL);
	i = 0;
	str = (char *)malloc(sizeof(char) * (ft_strlen(s)) + 1);
	if (str == NULL)
		return (NULL);
	while (s[i] != '\0')
	{
		str[i] = f(i, s[i]);
		i++;
	}
	str[i] = '\0';
	return (str);
}



================================================
FILE: includes/libft/ft_strncmp.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 09:59:55 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 09:59:58 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	while (n > 0 && *s1 != '\0' && *s1 == *s2)
	{
		s1++;
		s2++;
		n--;
	}
	if (n == 0)
		return (0);
	return ((unsigned char)*s1 - (unsigned char)*s2);
}

/*
void main()
{
	char *s1 = "This is srting A slfhosiboilndfisdfxiosdkfmx";
	char *s2 = "This is string B   lalala";

	int dif = ft_strncmp(s1, s2, 16);
	prtinf("%i", dif);
	return;
}
*/



================================================
FILE: includes/libft/ft_strnstr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:12 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:13 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

// apparently the stadard lib doesn't handle cases where needle == NULL

char	*ft_strnstr(const char *haystack, const char *needle, size_t n)
{
	size_t	i;
	size_t	j;
	char	*editable_haystack;

	editable_haystack = (char *)haystack;
	i = 0;
	j = 0;
	if (needle == NULL || needle[0] == '\0')
		return (editable_haystack);
	while (editable_haystack[i] != '\0' && i < n)
	{
		if (editable_haystack[i] == needle[j])
		{
			while (editable_haystack[i + j] == needle[j] && i + j < n)
			{
				if (needle[j + 1] == '\0')
					return (editable_haystack + i);
				j++;
			}
			j = 0;
		}
		i++;
	}
	return (NULL);
}



================================================
FILE: includes/libft/ft_strrchr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:28 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:30 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strrchr(const char *s, int c)
{
	int		i;

	i = ft_strlen(s);
	if (c == 0)
		return ((char *)s + i);
	while (i >= 0)
	{
		if (s[i] == c)
			return ((char *)s + i);
		i--;
	}
	return (NULL);
}



================================================
FILE: includes/libft/ft_strtrim.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:00:42 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:00:45 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strtrim(char const *s1, char const *set)
{
	size_t	i;
	size_t	j;
	char	*str;

	if (!s1 || !set)
		return (NULL);
	i = 0;
	j = ft_strlen(s1);
	while (s1[i] && ft_strchr(set, s1[i]))
		i++;
	while (j > i && ft_strchr(set, s1[j - 1]))
		j--;
	str = ft_substr(s1, i, j - i);
	if (!str)
		return (NULL);
	return (str);
}



================================================
FILE: includes/libft/ft_substr.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:13 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:15 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	size_t	i;
	size_t	j;
	char	*str;

	if (!s)
		return (NULL);
	if (start >= (unsigned int)ft_strlen(s))
		return (ft_strdup(""));
	str = (char *)malloc(sizeof(char) * (len + 1));
	if (str == NULL)
		return (NULL);
	i = start;
	j = 0;
	while (s[i] && j < len)
	{
		str[j] = s[i];
		j++;
		i++;
	}
	str[j] = '\0';
	return (str);
}



================================================
FILE: includes/libft/ft_tolower.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:26 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_tolower(int i)
{
	if (i >= 'A' && i <= 'Z')
		return (i + 32);
	return (i);
}



================================================
FILE: includes/libft/ft_toupper.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:33 by lroberts          #+#    #+#             */
/*   Updated: 2025/01/03 10:01:36 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_toupper(int i)
{
	if (i >= 'a' && i <= 'z')
		return (i - 32);
	return (i);
}



================================================
FILE: includes/libft/libft.h
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 10:01:50 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:49:04 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include "ft_printf.h"
# include <stdlib.h>
# include <unistd.h>

typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}					t_list;

t_list	*ft_lstlast(t_list *lst);
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *));
t_list	*ft_lstnew(void *content);
void	ft_lstadd_back(t_list **alst, t_list *new);
void	ft_lstadd_front(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void *));
void	ft_lstdelone(t_list *lst, void (*del)(void *));
void	ft_lstiter(t_list *lst, void (*f)(void *));
int		ft_lstsize(t_list *lst);
int		ft_atoi(const char *str);
void	ft_bzero(void *s, size_t n);
void	*ft_calloc(size_t count, size_t size);
int		ft_isalnum(int i);
int		ft_isalpha(int i);
int		ft_isascii(int i);
int		ft_isdigit(int i);
int		ft_isprint(int i);
void	*ft_memchr(const void *s, int c, size_t n);
int		ft_memcmp(const void *s1, const void *s2, size_t n);
void	*ft_memcpy(void *dest, const void *src, size_t n);
void	*ft_memmove(void *s1, const void *s2, size_t n);
void	*ft_memset(void *b, int c, size_t len);
char	*ft_strchr(const char *s, int i);
char	*ft_strdup(const char *s);
size_t	ft_strlcat(char *dest, const char *src, size_t size);
size_t	ft_strlcpy(char *dest, const char *src, size_t size);
int		ft_strlen(const char *str);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
char	*ft_strnstr(const char *haystack, const char *needle, size_t len);
char	*ft_strrchr(const char *s, int c);
int		ft_tolower(int i);
int		ft_toupper(int i);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strjoin(char const *s1, char const *s2);
char	*ft_strtrim(char const *s1, char const *set);
char	**ft_split(char const *str, char c);
char	*ft_itoa(int n);
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
void	ft_striteri(char *s, void (*f)(unsigned int, char*));
void	ft_putchar_fd(char c, int fd);
void	ft_putstr_fd(char *s, int fd);
void	ft_putendl_fd(char *s, int fd);
void	ft_putnbr_fd(int n, int fd);

#endif



================================================
FILE: includes/libft/main_test.c
================================================

#include "libft.h"

int main (void)
{
	ft_printf("holw\n");
	int len = ft_strlen("hello");
	// ft_printf("hello");
	return (len);
}



================================================
FILE: includes/libft/Makefile
================================================
NAME = libft.a

# Mandatory libft functions
SRCS = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c \
       ft_isdigit.c ft_isprint.c ft_itoa.c ft_memchr.c ft_memcmp.c ft_memcpy.c \
       ft_memmove.c ft_memset.c ft_putchar_fd.c ft_putendl_fd.c ft_putnbr_fd.c \
       ft_putstr_fd.c ft_split.c ft_strchr.c ft_strdup.c ft_striteri.c \
       ft_strjoin.c ft_strlcat.c ft_strlcpy.c ft_strlen.c ft_strmapi.c \
       ft_strncmp.c ft_strnstr.c ft_strrchr.c ft_strtrim.c ft_substr.c \
       ft_tolower.c ft_toupper.c

# Bonus functions
BONUS_SRCS = ft_lstadd_back_bonus.c ft_lstadd_front_bonus.c ft_lstclear_bonus.c \
             ft_lstdelone_bonus.c ft_lstiter_bonus.c ft_lstlast_bonus.c \
             ft_lstmap_bonus.c ft_lstnew_bonus.c ft_lstsize_bonus.c

# ft_printf functions (included as part of this libft)
PRINTF_SRCS = ft_printf.c print_hexptry.c print_types.c

# All sources combined for default compilation
ALL_SRCS = $(SRCS) $(PRINTF_SRCS)

# Object files
OBJS = $(ALL_SRCS:.c=.o)
BONUS_OBJS = $(BONUS_SRCS:.c=.o)

# Compiler and flags
CC = cc
CFLAGS = -Wall -Wextra -Werror

# Headers
HEADERS = libft.h ft_printf.h

# Default target
all: $(NAME)

# Create the library with mandatory and printf functions
$(NAME): $(OBJS)
	ar rcs $(NAME) $(OBJS)

# Bonus rule - adds bonus functions to existing library
bonus: $(OBJS) $(BONUS_OBJS)
	ar rcs $(NAME) $(OBJS) $(BONUS_OBJS)

# Compile object files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean object files
clean:
	rm -f $(OBJS) $(BONUS_OBJS)

# Clean everything
fclean: clean
	rm -f $(NAME)

# Rebuild
re: fclean all

# Phony targets
.PHONY: all bonus clean fclean re


================================================
FILE: includes/libft/print_hexptry.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_hexptry.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/17 22:24:56 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:21 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	rec_ptr(size_t ptr, int *len)
{
	const char	*hex_arr = "0123456789abcdef";

	if (ptr >= 16)
	{
		if (rec_ptr(ptr / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[ptr % 16], len) == -1)
		return (-1);
	return (0);
}

// too many functions from here on

int	print_ptr(size_t ptr, int *len)
{
	if (ptr == 0)
	{
		if (str("(nil)", len) == -1)
			return (-1);
	}
	else
	{
		if (str("0x", len) == -1)
			return (-1);
		if (rec_ptr(ptr, len) == -1)
			return (-1);
	}
	return (0);
}

int	hexadecimal_up(unsigned int x, int *len)
{
	const char	*hex_arr = "0123456789ABCDEF";

	if (x == 0)
	{
		if (put_charsum('0', len) == -1)
			return (-1);
		return (0);
	}
	if (x >= 16)
	{
		if (hexadecimal_up(x / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[x % 16], len) == -1)
		return (-1);
	return (0);
}

int	hexadecimal_low(unsigned int x, int *len)
{
	const char	*hex_arr = "0123456789abcdef";

	if (x == 0)
	{
		if (put_charsum('0', len) == -1)
			return (-1);
		return (0);
	}
	if (x >= 16)
	{
		if (hexadecimal_low(x / 16, len) == -1)
			return (-1);
	}
	if (put_charsum(hex_arr[x % 16], len) == -1)
		return (-1);
	return (0);
}



================================================
FILE: includes/libft/print_types.c
================================================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print_types.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lroberts <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/03 16:29:24 by lroberts          #+#    #+#             */
/*   Updated: 2025/05/18 10:36:18 by lroberts         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

int	put_charsum(const char c, int *len)
{
	if (write(1, &c, 1) == -1)
		return (-1);
	(*len)++;
	return (0);
}

int	str(const char *str, int *len)
{
	int	i;

	i = 0;
	if (str == NULL)
	{
		if (write(1, "(null)", 6) == -1)
			return (-1);
		(*len) += 6;
		return (0);
	}
	while (str[i] != '\0')
	{
		if (put_charsum(str[i], len) == -1)
			return (-1);
		i++;
	}
	return (0);
}

int	number(int nb, int *len)
{
	if (nb == INT_MIN)
	{
		if (write(1, "-2147483648", 11) == -1)
			return (-1);
		(*len) += 11;
		return (0);
	}
	if (nb < 0)
	{
		if (put_charsum('-', len) == -1)
			return (-1);
		nb *= -1;
	}
	if (nb >= 10)
	{
		if (number(nb / 10, len) == -1)
			return (-1);
	}
	if (put_charsum((nb % 10 + '0'), len) == -1)
		return (-1);
	return (0);
}

int	unsigned_int(unsigned int u, int *len)
{
	if (u >= 10)
	{
		if (unsigned_int(u / 10, len) == -1)
			return (-1);
	}
	if (put_charsum(u % 10 + '0', len) == -1)
		return (-1);
	return (0);
}


